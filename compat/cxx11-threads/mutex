/**************************************************************************
 *
 * Copyright 2011-2021 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 **************************************************************************/


#pragma once


#include_next <mutex>

#include <assert.h>
#include <process.h>
#include <windows.h>


namespace std {


    /**
     * Base class for mutex and recursive_mutex.
     */
    class _base_mutex
    {
    public:
        typedef CRITICAL_SECTION native_handle_type;

    protected:
        _base_mutex(void) {
        }

    public:
        ~_base_mutex() {
            DeleteCriticalSection(&_native_handle);
        }

        inline void
        lock(void) {
            EnterCriticalSection(&_native_handle);
        }

        inline void
        unlock(void) {
            LeaveCriticalSection(&_native_handle);
        }

        native_handle_type & native_handle() {
            return _native_handle;
        }

    protected:
        native_handle_type _native_handle;
    };


    /**
     * Same interface as std::mutex.
     */
    class mutex : public _base_mutex
    {
    public:
        inline
        mutex(void) {
            InitializeCriticalSection(&_native_handle);
        }
    };


    class recursive_mutex : public _base_mutex
    {
    public:
        inline
        recursive_mutex(void) {
            InitializeCriticalSection(&_native_handle);
        }
    };


} /* namespace std */
