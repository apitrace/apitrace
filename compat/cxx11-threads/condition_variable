/**************************************************************************
 *
 * Copyright 2011-2021 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 **************************************************************************/


#pragma once


#include_next <condition_variable>

#include <assert.h>
#include <process.h>
#include <windows.h>

#include <mutex>


namespace std {


    class condition_variable
    {
    private:
        // Supported on Vista an higher.
        typedef CONDITION_VARIABLE native_handle_type;
        native_handle_type _native_handle;

    public:
        condition_variable() {
            InitializeConditionVariable(&_native_handle);
        }

        ~condition_variable() {
            /* No-op */
        }

        inline void
        notify_one(void) {
            WakeConditionVariable(&_native_handle);
        }

        inline void
        notify_all(void) {
            WakeAllConditionVariable(&_native_handle);
        }

        inline void
        wait(unique_lock<mutex> & lock) {
            mutex::native_handle_type & mutex_native_handle = lock.mutex()->native_handle();
            SleepConditionVariableCS(&_native_handle, &mutex_native_handle, INFINITE);
        }

        inline void
        wait(unique_lock<mutex> & lock, std::function<bool()> pred) {
            while (!pred) {
                wait(lock);
            }
        }
    };


} /* namespace std */
