##########################################################################
#
# Copyright 2020 Joshua Ashton for Valve Software
# Copyright 2021 David McCloskey for Juice Technologies, Inc.
# All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
##########################################################################/


from .dxgi import *
from .d3dcommon import *
from .d3d12sdklayers import *

ID3D12RootSignature = Interface('ID3D12RootSignature', ID3D12DeviceChild)
ID3D12RootSignatureDeserializer = Interface('ID3D12RootSignatureDeserializer', IUnknown)
ID3D12VersionedRootSignatureDeserializer = Interface('ID3D12VersionedRootSignatureDeserializer', IUnknown)
ID3D12Heap = Interface('ID3D12Heap', ID3D12Pageable)
ID3D12CommandAllocator = Interface('ID3D12CommandAllocator', ID3D12Pageable)
ID3D12Fence1 = Interface('ID3D12Fence1', ID3D12Fence)
ID3D12PipelineState = Interface('ID3D12PipelineState', ID3D12Pageable)
ID3D12DescriptorHeap = Interface('ID3D12DescriptorHeap', ID3D12Pageable)
ID3D12QueryHeap = Interface('ID3D12QueryHeap', ID3D12Pageable)
ID3D12CommandSignature = Interface('ID3D12CommandSignature', ID3D12Pageable)
ID3D12CommandList = Interface('ID3D12CommandList', ID3D12DeviceChild)
ID3D12GraphicsCommandList = Interface('ID3D12GraphicsCommandList', ID3D12CommandList)
ID3D12GraphicsCommandList1 = Interface('ID3D12GraphicsCommandList1', ID3D12GraphicsCommandList)
ID3D12GraphicsCommandList2 = Interface('ID3D12GraphicsCommandList2', ID3D12GraphicsCommandList1)
ID3D12CommandQueue = Interface('ID3D12CommandQueue', ID3D12Pageable)
ID3D12Device = Interface('ID3D12Device', ID3D12Object)
ID3D12PipelineLibrary = Interface('ID3D12PipelineLibrary', ID3D12DeviceChild)
ID3D12PipelineLibrary1 = Interface('ID3D12PipelineLibrary1', ID3D12PipelineLibrary)
ID3D12Device1 = Interface('ID3D12Device1', ID3D12Device)
ID3D12Device2 = Interface('ID3D12Device2', ID3D12Device1)
ID3D12Device3 = Interface('ID3D12Device3', ID3D12Device2)
ID3D12ProtectedSession = Interface('ID3D12ProtectedSession', ID3D12DeviceChild)
ID3D12ProtectedResourceSession = Interface('ID3D12ProtectedResourceSession', ID3D12ProtectedSession)
ID3D12Device4 = Interface('ID3D12Device4', ID3D12Device3)
ID3D12LifetimeOwner = Interface('ID3D12LifetimeOwner', IUnknown)
ID3D12SwapChainAssistant = Interface('ID3D12SwapChainAssistant', IUnknown)
ID3D12LifetimeTracker = Interface('ID3D12LifetimeTracker', ID3D12DeviceChild)
ID3D12StateObject = Interface('ID3D12StateObject', ID3D12Pageable)
ID3D12StateObjectProperties = Interface('ID3D12StateObjectProperties', IUnknown)
ID3D12Device5 = Interface('ID3D12Device5', ID3D12Device4)
ID3D12DeviceRemovedExtendedDataSettings = Interface('ID3D12DeviceRemovedExtendedDataSettings', IUnknown)
ID3D12DeviceRemovedExtendedDataSettings1 = Interface('ID3D12DeviceRemovedExtendedDataSettings1', ID3D12DeviceRemovedExtendedDataSettings)
ID3D12DeviceRemovedExtendedData = Interface('ID3D12DeviceRemovedExtendedData', IUnknown)
ID3D12DeviceRemovedExtendedData1 = Interface('ID3D12DeviceRemovedExtendedData1', ID3D12DeviceRemovedExtendedData)
ID3D12Device6 = Interface('ID3D12Device6', ID3D12Device5)
ID3D12ProtectedResourceSession1 = Interface('ID3D12ProtectedResourceSession1', ID3D12ProtectedResourceSession)
ID3D12Device7 = Interface('ID3D12Device7', ID3D12Device6)
ID3D12Device8 = Interface('ID3D12Device8', ID3D12Device7)
ID3D12Resource1 = Interface('ID3D12Resource1', ID3D12Resource)
ID3D12Resource2 = Interface('ID3D12Resource2', ID3D12Resource1)
ID3D12Heap1 = Interface('ID3D12Heap1', ID3D12Heap)
ID3D12GraphicsCommandList3 = Interface('ID3D12GraphicsCommandList3', ID3D12GraphicsCommandList2)
ID3D12MetaCommand = Interface('ID3D12MetaCommand', ID3D12Pageable)
ID3D12GraphicsCommandList4 = Interface('ID3D12GraphicsCommandList4', ID3D12GraphicsCommandList3)
ID3D12Tools = Interface('ID3D12Tools', IUnknown)
ID3D12GraphicsCommandList5 = Interface('ID3D12GraphicsCommandList5', ID3D12GraphicsCommandList4)
ID3D12GraphicsCommandList6 = Interface('ID3D12GraphicsCommandList6', ID3D12GraphicsCommandList5)

D3D12_GPU_VIRTUAL_ADDRESS = Alias('D3D12_GPU_VIRTUAL_ADDRESS', UINT64)

D3D12_COMMAND_LIST_TYPE = Enum('D3D12_COMMAND_LIST_TYPE', [
    'D3D12_COMMAND_LIST_TYPE_DIRECT',
    'D3D12_COMMAND_LIST_TYPE_BUNDLE',
    'D3D12_COMMAND_LIST_TYPE_COMPUTE',
    'D3D12_COMMAND_LIST_TYPE_COPY',
    'D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE',
    'D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS',
    'D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE',
])

D3D12_COMMAND_QUEUE_FLAGS = EnumFlags('D3D12_COMMAND_QUEUE_FLAGS', [
    'D3D12_COMMAND_QUEUE_FLAG_NONE',
    'D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT',
])

D3D12_COMMAND_QUEUE_PRIORITY = Enum('D3D12_COMMAND_QUEUE_PRIORITY', [
    'D3D12_COMMAND_QUEUE_PRIORITY_NORMAL',
    'D3D12_COMMAND_QUEUE_PRIORITY_HIGH',
    'D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME',
])

D3D12_COMMAND_QUEUE_DESC = Struct('D3D12_COMMAND_QUEUE_DESC', [
    (D3D12_COMMAND_LIST_TYPE, 'Type'),
    (INT, 'Priority'),
    (D3D12_COMMAND_QUEUE_FLAGS, 'Flags'),
    (UINT, 'NodeMask'),
])

D3D12_PRIMITIVE_TOPOLOGY_TYPE = Enum('D3D12_PRIMITIVE_TOPOLOGY_TYPE', [
    'D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED',
    'D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT',
    'D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE',
    'D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE',
    'D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH',
])

D3D12_INPUT_CLASSIFICATION = Enum('D3D12_INPUT_CLASSIFICATION', [
    'D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA',
    'D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA',
])

D3D12_INPUT_ELEMENT_DESC = Struct('D3D12_INPUT_ELEMENT_DESC', [
    (LPCSTR, 'SemanticName'),
    (UINT, 'SemanticIndex'),
    (DXGI_FORMAT, 'Format'),
    (UINT, 'InputSlot'),
    (UINT, 'AlignedByteOffset'),
    (D3D12_INPUT_CLASSIFICATION, 'InputSlotClass'),
    (UINT, 'InstanceDataStepRate'),
])

D3D12_FILL_MODE = Enum('D3D12_FILL_MODE', [
    'D3D12_FILL_MODE_WIREFRAME',
    'D3D12_FILL_MODE_SOLID',
])

D3D12_PRIMITIVE_TOPOLOGY = Alias('D3D12_PRIMITIVE_TOPOLOGY', D3D_PRIMITIVE_TOPOLOGY)

D3D12_PRIMITIVE = Alias('D3D12_PRIMITIVE', D3D_PRIMITIVE)

D3D12_CULL_MODE = Enum('D3D12_CULL_MODE', [
    'D3D12_CULL_MODE_NONE',
    'D3D12_CULL_MODE_FRONT',
    'D3D12_CULL_MODE_BACK',
])

D3D12_SO_DECLARATION_ENTRY = Struct('D3D12_SO_DECLARATION_ENTRY', [
    (UINT, 'Stream'),
    (LPCSTR, 'SemanticName'),
    (UINT, 'SemanticIndex'),
    (BYTE, 'StartComponent'),
    (BYTE, 'ComponentCount'),
    (BYTE, 'OutputSlot'),
])

D3D12_VIEWPORT = Struct('D3D12_VIEWPORT', [
    (FLOAT, 'TopLeftX'),
    (FLOAT, 'TopLeftY'),
    (FLOAT, 'Width'),
    (FLOAT, 'Height'),
    (FLOAT, 'MinDepth'),
    (FLOAT, 'MaxDepth'),
])

D3D12_RECT = Alias('D3D12_RECT', RECT)

D3D12_BOX = Struct('D3D12_BOX', [
    (UINT, 'left'),
    (UINT, 'top'),
    (UINT, 'front'),
    (UINT, 'right'),
    (UINT, 'bottom'),
    (UINT, 'back'),
])

D3D12_COMPARISON_FUNC = Enum('D3D12_COMPARISON_FUNC', [
    'D3D12_COMPARISON_FUNC_NEVER',
    'D3D12_COMPARISON_FUNC_LESS',
    'D3D12_COMPARISON_FUNC_EQUAL',
    'D3D12_COMPARISON_FUNC_LESS_EQUAL',
    'D3D12_COMPARISON_FUNC_GREATER',
    'D3D12_COMPARISON_FUNC_NOT_EQUAL',
    'D3D12_COMPARISON_FUNC_GREATER_EQUAL',
    'D3D12_COMPARISON_FUNC_ALWAYS',
])

D3D12_DEPTH_WRITE_MASK = Enum('D3D12_DEPTH_WRITE_MASK', [
    'D3D12_DEPTH_WRITE_MASK_ZERO',
    'D3D12_DEPTH_WRITE_MASK_ALL',
])

D3D12_STENCIL_OP = Enum('D3D12_STENCIL_OP', [
    'D3D12_STENCIL_OP_KEEP',
    'D3D12_STENCIL_OP_ZERO',
    'D3D12_STENCIL_OP_REPLACE',
    'D3D12_STENCIL_OP_INCR_SAT',
    'D3D12_STENCIL_OP_DECR_SAT',
    'D3D12_STENCIL_OP_INVERT',
    'D3D12_STENCIL_OP_INCR',
    'D3D12_STENCIL_OP_DECR',
])

D3D12_DEPTH_STENCILOP_DESC = Struct('D3D12_DEPTH_STENCILOP_DESC', [
    (D3D12_STENCIL_OP, 'StencilFailOp'),
    (D3D12_STENCIL_OP, 'StencilDepthFailOp'),
    (D3D12_STENCIL_OP, 'StencilPassOp'),
    (D3D12_COMPARISON_FUNC, 'StencilFunc'),
])

D3D12_DEPTH_STENCIL_DESC = Struct('D3D12_DEPTH_STENCIL_DESC', [
    (BOOL, 'DepthEnable'),
    (D3D12_DEPTH_WRITE_MASK, 'DepthWriteMask'),
    (D3D12_COMPARISON_FUNC, 'DepthFunc'),
    (BOOL, 'StencilEnable'),
    (UINT8, 'StencilReadMask'),
    (UINT8, 'StencilWriteMask'),
    (D3D12_DEPTH_STENCILOP_DESC, 'FrontFace'),
    (D3D12_DEPTH_STENCILOP_DESC, 'BackFace'),
])

D3D12_DEPTH_STENCIL_DESC1 = Struct('D3D12_DEPTH_STENCIL_DESC1', [
    (BOOL, 'DepthEnable'),
    (D3D12_DEPTH_WRITE_MASK, 'DepthWriteMask'),
    (D3D12_COMPARISON_FUNC, 'DepthFunc'),
    (BOOL, 'StencilEnable'),
    (UINT8, 'StencilReadMask'),
    (UINT8, 'StencilWriteMask'),
    (D3D12_DEPTH_STENCILOP_DESC, 'FrontFace'),
    (D3D12_DEPTH_STENCILOP_DESC, 'BackFace'),
    (BOOL, 'DepthBoundsTestEnable'),
])

D3D12_BLEND = Enum('D3D12_BLEND', [
    'D3D12_BLEND_ZERO',
    'D3D12_BLEND_ONE',
    'D3D12_BLEND_SRC_COLOR',
    'D3D12_BLEND_INV_SRC_COLOR',
    'D3D12_BLEND_SRC_ALPHA',
    'D3D12_BLEND_INV_SRC_ALPHA',
    'D3D12_BLEND_DEST_ALPHA',
    'D3D12_BLEND_INV_DEST_ALPHA',
    'D3D12_BLEND_DEST_COLOR',
    'D3D12_BLEND_INV_DEST_COLOR',
    'D3D12_BLEND_SRC_ALPHA_SAT',
    'D3D12_BLEND_BLEND_FACTOR',
    'D3D12_BLEND_INV_BLEND_FACTOR',
    'D3D12_BLEND_SRC1_COLOR',
    'D3D12_BLEND_INV_SRC1_COLOR',
    'D3D12_BLEND_SRC1_ALPHA',
    'D3D12_BLEND_INV_SRC1_ALPHA',
])

D3D12_BLEND_OP = Enum('D3D12_BLEND_OP', [
    'D3D12_BLEND_OP_ADD',
    'D3D12_BLEND_OP_SUBTRACT',
    'D3D12_BLEND_OP_REV_SUBTRACT',
    'D3D12_BLEND_OP_MIN',
    'D3D12_BLEND_OP_MAX',
])

D3D12_COLOR_WRITE_ENABLE = Enum('D3D12_COLOR_WRITE_ENABLE', [
    'D3D12_COLOR_WRITE_ENABLE_RED',
    'D3D12_COLOR_WRITE_ENABLE_GREEN',
    'D3D12_COLOR_WRITE_ENABLE_BLUE',
    'D3D12_COLOR_WRITE_ENABLE_ALPHA',
    'D3D12_COLOR_WRITE_ENABLE_ALL',
])

D3D12_LOGIC_OP = Enum('D3D12_LOGIC_OP', [
    'D3D12_LOGIC_OP_CLEAR',
    'D3D12_LOGIC_OP_SET',
    'D3D12_LOGIC_OP_COPY',
    'D3D12_LOGIC_OP_COPY_INVERTED',
    'D3D12_LOGIC_OP_NOOP',
    'D3D12_LOGIC_OP_INVERT',
    'D3D12_LOGIC_OP_AND',
    'D3D12_LOGIC_OP_NAND',
    'D3D12_LOGIC_OP_OR',
    'D3D12_LOGIC_OP_NOR',
    'D3D12_LOGIC_OP_XOR',
    'D3D12_LOGIC_OP_EQUIV',
    'D3D12_LOGIC_OP_AND_REVERSE',
    'D3D12_LOGIC_OP_AND_INVERTED',
    'D3D12_LOGIC_OP_OR_REVERSE',
    'D3D12_LOGIC_OP_OR_INVERTED',
])

D3D12_RENDER_TARGET_BLEND_DESC = Struct('D3D12_RENDER_TARGET_BLEND_DESC', [
    (BOOL, 'BlendEnable'),
    (BOOL, 'LogicOpEnable'),
    (D3D12_BLEND, 'SrcBlend'),
    (D3D12_BLEND, 'DestBlend'),
    (D3D12_BLEND_OP, 'BlendOp'),
    (D3D12_BLEND, 'SrcBlendAlpha'),
    (D3D12_BLEND, 'DestBlendAlpha'),
    (D3D12_BLEND_OP, 'BlendOpAlpha'),
    (D3D12_LOGIC_OP, 'LogicOp'),
    (UINT8, 'RenderTargetWriteMask'),
])

D3D12_BLEND_DESC = Struct('D3D12_BLEND_DESC', [
    (BOOL, 'AlphaToCoverageEnable'),
    (BOOL, 'IndependentBlendEnable'),
    (Array(D3D12_RENDER_TARGET_BLEND_DESC, 8), 'RenderTarget'),
])

D3D12_CONSERVATIVE_RASTERIZATION_MODE = Enum('D3D12_CONSERVATIVE_RASTERIZATION_MODE', [
    'D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF',
    'D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON',
])

D3D12_RASTERIZER_DESC = Struct('D3D12_RASTERIZER_DESC', [
    (D3D12_FILL_MODE, 'FillMode'),
    (D3D12_CULL_MODE, 'CullMode'),
    (BOOL, 'FrontCounterClockwise'),
    (INT, 'DepthBias'),
    (FLOAT, 'DepthBiasClamp'),
    (FLOAT, 'SlopeScaledDepthBias'),
    (BOOL, 'DepthClipEnable'),
    (BOOL, 'MultisampleEnable'),
    (BOOL, 'AntialiasedLineEnable'),
    (UINT, 'ForcedSampleCount'),
    (D3D12_CONSERVATIVE_RASTERIZATION_MODE, 'ConservativeRaster'),
])

D3D12_SHADER_BYTECODE = Struct('D3D12_SHADER_BYTECODE', [
    (Blob(Const(Void), '{self}.BytecodeLength'), 'pShaderBytecode'),
    (SIZE_T, 'BytecodeLength'),
])

D3D12_STREAM_OUTPUT_DESC = Struct('D3D12_STREAM_OUTPUT_DESC', [
    (Array(Const(D3D12_SO_DECLARATION_ENTRY), '{self}.NumEntries'), 'pSODeclaration'),
    (UINT, 'NumEntries'),
    (Array(Const(UINT), '{self}.NumStrides'), 'pBufferStrides'),
    (UINT, 'NumStrides'),
    (UINT, 'RasterizedStream'),
])

D3D12_INPUT_LAYOUT_DESC = Struct('D3D12_INPUT_LAYOUT_DESC', [
    (Array(Const(D3D12_INPUT_ELEMENT_DESC), '{self}.NumElements'), 'pInputElementDescs'),
    (UINT, 'NumElements'),
])

D3D12_INDEX_BUFFER_STRIP_CUT_VALUE = Enum('D3D12_INDEX_BUFFER_STRIP_CUT_VALUE', [
    'D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED',
    'D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF',
    'D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF',
])

D3D12_CACHED_PIPELINE_STATE = Struct('D3D12_CACHED_PIPELINE_STATE', [
    (Blob(Const(Void), '{self}.CachedBlobSizeInBytes'), 'pCachedBlob'),
    (SIZE_T, 'CachedBlobSizeInBytes'),
])

D3D12_PIPELINE_STATE_FLAGS = EnumFlags('D3D12_PIPELINE_STATE_FLAGS', [
    'D3D12_PIPELINE_STATE_FLAG_NONE',
    'D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG',
])

D3D12_GRAPHICS_PIPELINE_STATE_DESC = Struct('D3D12_GRAPHICS_PIPELINE_STATE_DESC', [
    (ObjPointer(ID3D12RootSignature), 'pRootSignature'),
    (D3D12_SHADER_BYTECODE, 'VS'),
    (D3D12_SHADER_BYTECODE, 'PS'),
    (D3D12_SHADER_BYTECODE, 'DS'),
    (D3D12_SHADER_BYTECODE, 'HS'),
    (D3D12_SHADER_BYTECODE, 'GS'),
    (D3D12_STREAM_OUTPUT_DESC, 'StreamOutput'),
    (D3D12_BLEND_DESC, 'BlendState'),
    (UINT, 'SampleMask'),
    (D3D12_RASTERIZER_DESC, 'RasterizerState'),
    (D3D12_DEPTH_STENCIL_DESC, 'DepthStencilState'),
    (D3D12_INPUT_LAYOUT_DESC, 'InputLayout'),
    (D3D12_INDEX_BUFFER_STRIP_CUT_VALUE, 'IBStripCutValue'),
    (D3D12_PRIMITIVE_TOPOLOGY_TYPE, 'PrimitiveTopologyType'),
    (UINT, 'NumRenderTargets'),
    (Array(DXGI_FORMAT, 8), 'RTVFormats'),
    (DXGI_FORMAT, 'DSVFormat'),
    (DXGI_SAMPLE_DESC, 'SampleDesc'),
    (UINT, 'NodeMask'),
    (D3D12_CACHED_PIPELINE_STATE, 'CachedPSO'),
    (D3D12_PIPELINE_STATE_FLAGS, 'Flags'),
])

D3D12_COMPUTE_PIPELINE_STATE_DESC = Struct('D3D12_COMPUTE_PIPELINE_STATE_DESC', [
    (ObjPointer(ID3D12RootSignature), 'pRootSignature'),
    (D3D12_SHADER_BYTECODE, 'CS'),
    (UINT, 'NodeMask'),
    (D3D12_CACHED_PIPELINE_STATE, 'CachedPSO'),
    (D3D12_PIPELINE_STATE_FLAGS, 'Flags'),
])

D3D12_RT_FORMAT_ARRAY = Struct('D3D12_RT_FORMAT_ARRAY', [
    (Array(DXGI_FORMAT, 8), 'RTFormats'),
    (UINT, 'NumRenderTargets'),
])

D3D12_PIPELINE_STATE_STREAM_DESC = Struct('D3D12_PIPELINE_STATE_STREAM_DESC', [
    (SIZE_T, 'SizeInBytes'),
    (OpaquePointer(Void), 'pPipelineStateSubobjectStream'),
])

D3D12_PIPELINE_STATE_SUBOBJECT_TYPE = Enum('D3D12_PIPELINE_STATE_SUBOBJECT_TYPE', [
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS',
    'D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID',
])

D3D12_FEATURE = Enum('D3D12_FEATURE', [
    'D3D12_FEATURE_D3D12_OPTIONS',
    'D3D12_FEATURE_ARCHITECTURE',
    'D3D12_FEATURE_FEATURE_LEVELS',
    'D3D12_FEATURE_FORMAT_SUPPORT',
    'D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS',
    'D3D12_FEATURE_FORMAT_INFO',
    'D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT',
    'D3D12_FEATURE_SHADER_MODEL',
    'D3D12_FEATURE_D3D12_OPTIONS1',
    'D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT',
    'D3D12_FEATURE_ROOT_SIGNATURE',
    'D3D12_FEATURE_ARCHITECTURE1',
    'D3D12_FEATURE_D3D12_OPTIONS2',
    'D3D12_FEATURE_SHADER_CACHE',
    'D3D12_FEATURE_COMMAND_QUEUE_PRIORITY',
    'D3D12_FEATURE_D3D12_OPTIONS3',
    'D3D12_FEATURE_EXISTING_HEAPS',
    'D3D12_FEATURE_D3D12_OPTIONS4',
    'D3D12_FEATURE_SERIALIZATION',
    'D3D12_FEATURE_CROSS_NODE',
    'D3D12_FEATURE_D3D12_OPTIONS5',
    'D3D12_FEATURE_D3D12_OPTIONS6',
    'D3D12_FEATURE_QUERY_META_COMMAND',
    'D3D12_FEATURE_D3D12_OPTIONS7',
    'D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT',
    'D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES',
])

D3D12_SHADER_MIN_PRECISION_SUPPORT = EnumFlags('D3D12_SHADER_MIN_PRECISION_SUPPORT', [
    'D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE',
    'D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT',
    'D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT',
])

D3D12_TILED_RESOURCES_TIER = Enum('D3D12_TILED_RESOURCES_TIER', [
    'D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED',
    'D3D12_TILED_RESOURCES_TIER_1',
    'D3D12_TILED_RESOURCES_TIER_2',
    'D3D12_TILED_RESOURCES_TIER_3',
    'D3D12_TILED_RESOURCES_TIER_4',
])

D3D12_RESOURCE_BINDING_TIER = Enum('D3D12_RESOURCE_BINDING_TIER', [
    'D3D12_RESOURCE_BINDING_TIER_1',
    'D3D12_RESOURCE_BINDING_TIER_2',
    'D3D12_RESOURCE_BINDING_TIER_3',
])

D3D12_CONSERVATIVE_RASTERIZATION_TIER = Enum('D3D12_CONSERVATIVE_RASTERIZATION_TIER', [
    'D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED',
    'D3D12_CONSERVATIVE_RASTERIZATION_TIER_1',
    'D3D12_CONSERVATIVE_RASTERIZATION_TIER_2',
    'D3D12_CONSERVATIVE_RASTERIZATION_TIER_3',
])

D3D12_FORMAT_SUPPORT1 = EnumFlags('D3D12_FORMAT_SUPPORT1', [
    'D3D12_FORMAT_SUPPORT1_NONE',
    'D3D12_FORMAT_SUPPORT1_BUFFER',
    'D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER',
    'D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER',
    'D3D12_FORMAT_SUPPORT1_SO_BUFFER',
    'D3D12_FORMAT_SUPPORT1_TEXTURE1D',
    'D3D12_FORMAT_SUPPORT1_TEXTURE2D',
    'D3D12_FORMAT_SUPPORT1_TEXTURE3D',
    'D3D12_FORMAT_SUPPORT1_TEXTURECUBE',
    'D3D12_FORMAT_SUPPORT1_SHADER_LOAD',
    'D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE',
    'D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON',
    'D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT',
    'D3D12_FORMAT_SUPPORT1_MIP',
    'D3D12_FORMAT_SUPPORT1_RENDER_TARGET',
    'D3D12_FORMAT_SUPPORT1_BLENDABLE',
    'D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL',
    'D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE',
    'D3D12_FORMAT_SUPPORT1_DISPLAY',
    'D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT',
    'D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET',
    'D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD',
    'D3D12_FORMAT_SUPPORT1_SHADER_GATHER',
    'D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST',
    'D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW',
    'D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON',
    'D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT',
    'D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT',
    'D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT',
    'D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER',
])

D3D12_FORMAT_SUPPORT2 = EnumFlags('D3D12_FORMAT_SUPPORT2', [
    'D3D12_FORMAT_SUPPORT2_NONE',
    'D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD',
    'D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS',
    'D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE',
    'D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE',
    'D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX',
    'D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX',
    'D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD',
    'D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE',
    'D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP',
    'D3D12_FORMAT_SUPPORT2_TILED',
    'D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY',
    'D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK',
])

D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS = EnumFlags('D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS', [
    'D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE',
    'D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE',
])

D3D12_CROSS_NODE_SHARING_TIER = Enum('D3D12_CROSS_NODE_SHARING_TIER', [
    'D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED',
    'D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED',
    'D3D12_CROSS_NODE_SHARING_TIER_1',
    'D3D12_CROSS_NODE_SHARING_TIER_2',
    'D3D12_CROSS_NODE_SHARING_TIER_3',
])

D3D12_RESOURCE_HEAP_TIER = Enum('D3D12_RESOURCE_HEAP_TIER', [
    'D3D12_RESOURCE_HEAP_TIER_1',
    'D3D12_RESOURCE_HEAP_TIER_2',
])

D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER = Enum('D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER', [
    'D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED',
    'D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1',
    'D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2',
])

D3D12_VIEW_INSTANCING_TIER = Enum('D3D12_VIEW_INSTANCING_TIER', [
    'D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED',
    'D3D12_VIEW_INSTANCING_TIER_1',
    'D3D12_VIEW_INSTANCING_TIER_2',
    'D3D12_VIEW_INSTANCING_TIER_3',
])

D3D12_FEATURE_DATA_D3D12_OPTIONS = Struct('D3D12_FEATURE_DATA_D3D12_OPTIONS', [
    (BOOL, 'DoublePrecisionFloatShaderOps'),
    (BOOL, 'OutputMergerLogicOp'),
    (D3D12_SHADER_MIN_PRECISION_SUPPORT, 'MinPrecisionSupport'),
    (D3D12_TILED_RESOURCES_TIER, 'TiledResourcesTier'),
    (D3D12_RESOURCE_BINDING_TIER, 'ResourceBindingTier'),
    (BOOL, 'PSSpecifiedStencilRefSupported'),
    (BOOL, 'TypedUAVLoadAdditionalFormats'),
    (BOOL, 'ROVsSupported'),
    (D3D12_CONSERVATIVE_RASTERIZATION_TIER, 'ConservativeRasterizationTier'),
    (UINT, 'MaxGPUVirtualAddressBitsPerResource'),
    (BOOL, 'StandardSwizzle64KBSupported'),
    (D3D12_CROSS_NODE_SHARING_TIER, 'CrossNodeSharingTier'),
    (BOOL, 'CrossAdapterRowMajorTextureSupported'),
    (BOOL, 'VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation'),
    (D3D12_RESOURCE_HEAP_TIER, 'ResourceHeapTier'),
])

D3D12_FEATURE_DATA_D3D12_OPTIONS1 = Struct('D3D12_FEATURE_DATA_D3D12_OPTIONS1', [
    (BOOL, 'WaveOps'),
    (UINT, 'WaveLaneCountMin'),
    (UINT, 'WaveLaneCountMax'),
    (UINT, 'TotalLaneCount'),
    (BOOL, 'ExpandedComputeResourceStates'),
    (BOOL, 'Int64ShaderOps'),
])

D3D12_FEATURE_DATA_D3D12_OPTIONS2 = Struct('D3D12_FEATURE_DATA_D3D12_OPTIONS2', [
    (BOOL, 'DepthBoundsTestSupported'),
    (D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER, 'ProgrammableSamplePositionsTier'),
])

D3D_ROOT_SIGNATURE_VERSION = Enum('D3D_ROOT_SIGNATURE_VERSION', [
    #'D3D_ROOT_SIGNATURE_VERSION_1',
    'D3D_ROOT_SIGNATURE_VERSION_1_0',
    'D3D_ROOT_SIGNATURE_VERSION_1_1',
])

D3D12_FEATURE_DATA_ROOT_SIGNATURE = Struct('D3D12_FEATURE_DATA_ROOT_SIGNATURE', [
    (D3D_ROOT_SIGNATURE_VERSION, 'HighestVersion'),
])

D3D12_FEATURE_DATA_ARCHITECTURE = Struct('D3D12_FEATURE_DATA_ARCHITECTURE', [
    (UINT, 'NodeIndex'),
    (BOOL, 'TileBasedRenderer'),
    (BOOL, 'UMA'),
    (BOOL, 'CacheCoherentUMA'),
])

D3D12_FEATURE_DATA_ARCHITECTURE1 = Struct('D3D12_FEATURE_DATA_ARCHITECTURE1', [
    (UINT, 'NodeIndex'),
    (BOOL, 'TileBasedRenderer'),
    (BOOL, 'UMA'),
    (BOOL, 'CacheCoherentUMA'),
    (BOOL, 'IsolatedMMU'),
])

D3D12_FEATURE_DATA_FEATURE_LEVELS = Struct('D3D12_FEATURE_DATA_FEATURE_LEVELS', [
    (UINT, 'NumFeatureLevels'),
    (Array(Const(D3D_FEATURE_LEVEL), '{self}.NumFeaturesLevels'), 'pFeatureLevelsRequested'),
    (D3D_FEATURE_LEVEL, 'MaxSupportedFeatureLevel'),
])

D3D_SHADER_MODEL = Enum('D3D_SHADER_MODEL', [
    'D3D_SHADER_MODEL_5_1',
    'D3D_SHADER_MODEL_6_0',
    'D3D_SHADER_MODEL_6_1',
    'D3D_SHADER_MODEL_6_2',
    'D3D_SHADER_MODEL_6_3',
    'D3D_SHADER_MODEL_6_4',
    'D3D_SHADER_MODEL_6_5',
    'D3D_SHADER_MODEL_6_6',
])

D3D12_FEATURE_DATA_SHADER_MODEL = Struct('D3D12_FEATURE_DATA_SHADER_MODEL', [
    (D3D_SHADER_MODEL, 'HighestShaderModel'),
])

D3D12_FEATURE_DATA_FORMAT_SUPPORT = Struct('D3D12_FEATURE_DATA_FORMAT_SUPPORT', [
    (DXGI_FORMAT, 'Format'),
    (D3D12_FORMAT_SUPPORT1, 'Support1'),
    (D3D12_FORMAT_SUPPORT2, 'Support2'),
])

D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS = Struct('D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS', [
    (DXGI_FORMAT, 'Format'),
    (UINT, 'SampleCount'),
    (D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS, 'Flags'),
    (UINT, 'NumQualityLevels'),
])

D3D12_FEATURE_DATA_FORMAT_INFO = Struct('D3D12_FEATURE_DATA_FORMAT_INFO', [
    (DXGI_FORMAT, 'Format'),
    (UINT8, 'PlaneCount'),
])

D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = Struct('D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT', [
    (UINT, 'MaxGPUVirtualAddressBitsPerResource'),
    (UINT, 'MaxGPUVirtualAddressBitsPerProcess'),
])

D3D12_SHADER_CACHE_SUPPORT_FLAGS = Enum('D3D12_SHADER_CACHE_SUPPORT_FLAGS', [
    'D3D12_SHADER_CACHE_SUPPORT_NONE',
    'D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO',
    'D3D12_SHADER_CACHE_SUPPORT_LIBRARY',
    'D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE',
    'D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE',
])

D3D12_FEATURE_DATA_SHADER_CACHE = Struct('D3D12_FEATURE_DATA_SHADER_CACHE', [
    (D3D12_SHADER_CACHE_SUPPORT_FLAGS, 'SupportFlags'),
])

D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY = Struct('D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY', [
    (D3D12_COMMAND_LIST_TYPE, 'CommandListType'),
    (UINT, 'Priority'),
    (BOOL, 'PriorityForTypeIsSupported'),
])

D3D12_COMMAND_LIST_SUPPORT_FLAGS = Enum('D3D12_COMMAND_LIST_SUPPORT_FLAGS', [
    'D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE',
    'D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT',
    'D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE',
    'D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE',
    'D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY',
    'D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE',
    'D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS',
    'D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE',
])

D3D12_FEATURE_DATA_D3D12_OPTIONS3 = Struct('D3D12_FEATURE_DATA_D3D12_OPTIONS3', [
    (BOOL, 'CopyQueueTimestampQueriesSupported'),
    (BOOL, 'CastingFullyTypedFormatSupported'),
    (D3D12_COMMAND_LIST_SUPPORT_FLAGS, 'WriteBufferImmediateSupportFlags'),
    (D3D12_VIEW_INSTANCING_TIER, 'ViewInstancingTier'),
    (BOOL, 'BarycentricsSupported'),
])

D3D12_FEATURE_DATA_EXISTING_HEAPS = Struct('D3D12_FEATURE_DATA_EXISTING_HEAPS', [
    (BOOL, 'Supported'),
])

D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER = Enum('D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER', [
    'D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0',
    'D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1',
    'D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2',
])

D3D12_FEATURE_DATA_D3D12_OPTIONS4 = Struct('D3D12_FEATURE_DATA_D3D12_OPTIONS4', [
    (BOOL, 'MSAA64KBAlignedTextureSupported'),
    (D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER, 'SharedResourceCompatibilityTier'),
    (BOOL, 'Native16BitShaderOpsSupported'),
])

D3D12_HEAP_SERIALIZATION_TIER = Enum('D3D12_HEAP_SERIALIZATION_TIER', [
    'D3D12_HEAP_SERIALIZATION_TIER_0',
    'D3D12_HEAP_SERIALIZATION_TIER_10',
])

D3D12_FEATURE_DATA_SERIALIZATION = Struct('D3D12_FEATURE_DATA_SERIALIZATION', [
    (UINT, 'NodeIndex'),
    (D3D12_HEAP_SERIALIZATION_TIER, 'HeapSerializationTier'),
])

D3D12_FEATURE_DATA_CROSS_NODE = Struct('D3D12_FEATURE_DATA_CROSS_NODE', [
    (D3D12_CROSS_NODE_SHARING_TIER, 'SharingTier'),
    (BOOL, 'AtomicShaderInstructions'),
])

D3D12_RENDER_PASS_TIER = Enum('D3D12_RENDER_PASS_TIER', [
    'D3D12_RENDER_PASS_TIER_0',
    'D3D12_RENDER_PASS_TIER_1',
    'D3D12_RENDER_PASS_TIER_2',
])

D3D12_RAYTRACING_TIER = Enum('D3D12_RAYTRACING_TIER', [
    'D3D12_RAYTRACING_TIER_NOT_SUPPORTED',
    'D3D12_RAYTRACING_TIER_1_0',
    'D3D12_RAYTRACING_TIER_1_1',
])

D3D12_FEATURE_DATA_D3D12_OPTIONS5 = Struct('D3D12_FEATURE_DATA_D3D12_OPTIONS5', [
    (BOOL, 'SRVOnlyTiledResourceTier3'),
    (D3D12_RENDER_PASS_TIER, 'RenderPassesTier'),
    (D3D12_RAYTRACING_TIER, 'RaytracingTier'),
])

D3D12_VARIABLE_SHADING_RATE_TIER = Enum('D3D12_VARIABLE_SHADING_RATE_TIER', [
    'D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED',
    'D3D12_VARIABLE_SHADING_RATE_TIER_1',
    'D3D12_VARIABLE_SHADING_RATE_TIER_2',
])

D3D12_FEATURE_DATA_D3D12_OPTIONS6 = Struct('D3D12_FEATURE_DATA_D3D12_OPTIONS6', [
    (BOOL, 'AdditionalShadingRatesSupported'),
    (BOOL, 'PerPrimitiveShadingRateSupportedWithViewportIndexing'),
    (D3D12_VARIABLE_SHADING_RATE_TIER, 'VariableShadingRateTier'),
    (UINT, 'ShadingRateImageTileSize'),
    (BOOL, 'BackgroundProcessingSupported'),
])

D3D12_MESH_SHADER_TIER = Enum('D3D12_MESH_SHADER_TIER', [
    'D3D12_MESH_SHADER_TIER_NOT_SUPPORTED',
    'D3D12_MESH_SHADER_TIER_1',
])

D3D12_SAMPLER_FEEDBACK_TIER = Enum('D3D12_SAMPLER_FEEDBACK_TIER', [
    'D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED',
    'D3D12_SAMPLER_FEEDBACK_TIER_0_9',
    'D3D12_SAMPLER_FEEDBACK_TIER_1_0',
])

D3D12_FEATURE_DATA_D3D12_OPTIONS7 = Struct('D3D12_FEATURE_DATA_D3D12_OPTIONS7', [
    (D3D12_MESH_SHADER_TIER, 'MeshShaderTier'),
    (D3D12_SAMPLER_FEEDBACK_TIER, 'SamplerFeedbackTier'),
])

D3D12_FEATURE_DATA_QUERY_META_COMMAND = Struct('D3D12_FEATURE_DATA_QUERY_META_COMMAND', [
    (GUID, 'CommandId'),
    (UINT, 'NodeMask'),
    (Pointer(Const(Void)), 'pQueryInputData'),
    (SIZE_T, 'QueryInputDataSizeInBytes'),
    (Pointer(Void), 'pQueryOutputData'),
    (SIZE_T, 'QueryOutputDataSizeInBytes'),
])

D3D12_RESOURCE_ALLOCATION_INFO = Struct('D3D12_RESOURCE_ALLOCATION_INFO', [
    (UINT64, 'SizeInBytes'),
    (UINT64, 'Alignment'),
])

D3D12_RESOURCE_ALLOCATION_INFO1 = Struct('D3D12_RESOURCE_ALLOCATION_INFO1', [
    (UINT64, 'Offset'),
    (UINT64, 'Alignment'),
    (UINT64, 'SizeInBytes'),
])

D3D12_HEAP_TYPE = Enum('D3D12_HEAP_TYPE', [
    'D3D12_HEAP_TYPE_DEFAULT',
    'D3D12_HEAP_TYPE_UPLOAD',
    'D3D12_HEAP_TYPE_READBACK',
    'D3D12_HEAP_TYPE_CUSTOM',
])

D3D12_CPU_PAGE_PROPERTY = Enum('D3D12_CPU_PAGE_PROPERTY', [
    'D3D12_CPU_PAGE_PROPERTY_UNKNOWN',
    'D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE',
    'D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE',
    'D3D12_CPU_PAGE_PROPERTY_WRITE_BACK',
])

D3D12_MEMORY_POOL = Enum('D3D12_MEMORY_POOL', [
    'D3D12_MEMORY_POOL_UNKNOWN',
    'D3D12_MEMORY_POOL_L0',
    'D3D12_MEMORY_POOL_L1',
])

D3D12_HEAP_PROPERTIES = Struct('D3D12_HEAP_PROPERTIES', [
    (D3D12_HEAP_TYPE, 'Type'),
    (D3D12_CPU_PAGE_PROPERTY, 'CPUPageProperty'),
    (D3D12_MEMORY_POOL, 'MemoryPoolPreference'),
    (UINT, 'CreationNodeMask'),
    (UINT, 'VisibleNodeMask'),
])

D3D12_HEAP_FLAGS = EnumFlags('D3D12_HEAP_FLAGS', [
    'D3D12_HEAP_FLAG_NONE',
    'D3D12_HEAP_FLAG_SHARED',
    'D3D12_HEAP_FLAG_DENY_BUFFERS',
    'D3D12_HEAP_FLAG_ALLOW_DISPLAY',
    'D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER',
    'D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES',
    'D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES',
    'D3D12_HEAP_FLAG_HARDWARE_PROTECTED',
    'D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH',
    'D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS',
    'D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT',
    'D3D12_HEAP_FLAG_CREATE_NOT_ZEROED',
    'D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES',
    'D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS',
    'D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES',
    'D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES',
])

D3D12_HEAP_DESC = Struct('D3D12_HEAP_DESC', [
    (UINT64, 'SizeInBytes'),
    (D3D12_HEAP_PROPERTIES, 'Properties'),
    (UINT64, 'Alignment'),
    (D3D12_HEAP_FLAGS, 'Flags'),
])

D3D12_RESOURCE_DIMENSION = Enum('D3D12_RESOURCE_DIMENSION', [
    'D3D12_RESOURCE_DIMENSION_UNKNOWN',
    'D3D12_RESOURCE_DIMENSION_BUFFER',
    'D3D12_RESOURCE_DIMENSION_TEXTURE1D',
    'D3D12_RESOURCE_DIMENSION_TEXTURE2D',
    'D3D12_RESOURCE_DIMENSION_TEXTURE3D',
])

D3D12_TEXTURE_LAYOUT = Enum('D3D12_TEXTURE_LAYOUT', [
    'D3D12_TEXTURE_LAYOUT_UNKNOWN',
    'D3D12_TEXTURE_LAYOUT_ROW_MAJOR',
    'D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE',
    'D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE',
])

D3D12_RESOURCE_FLAGS = EnumFlags('D3D12_RESOURCE_FLAGS', [
    'D3D12_RESOURCE_FLAG_NONE',
    'D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET',
    'D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL',
    'D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS',
    'D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE',
    'D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER',
    'D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS',
    'D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY',
])

D3D12_MIP_REGION = Struct('D3D12_MIP_REGION', [
    (UINT, 'Width'),
    (UINT, 'Height'),
    (UINT, 'Depth'),
])

D3D12_RESOURCE_DESC = Struct('D3D12_RESOURCE_DESC', [
    (D3D12_RESOURCE_DIMENSION, 'Dimension'),
    (UINT64, 'Alignment'),
    (UINT64, 'Width'),
    (UINT, 'Height'),
    (UINT16, 'DepthOrArraySize'),
    (UINT16, 'MipLevels'),
    (DXGI_FORMAT, 'Format'),
    (DXGI_SAMPLE_DESC, 'SampleDesc'),
    (D3D12_TEXTURE_LAYOUT, 'Layout'),
    (D3D12_RESOURCE_FLAGS, 'Flags'),
])

D3D12_RESOURCE_DESC1 = Struct('D3D12_RESOURCE_DESC1', [
    (D3D12_RESOURCE_DIMENSION, 'Dimension'),
    (UINT64, 'Alignment'),
    (UINT64, 'Width'),
    (UINT, 'Height'),
    (UINT16, 'DepthOrArraySize'),
    (UINT16, 'MipLevels'),
    (DXGI_FORMAT, 'Format'),
    (DXGI_SAMPLE_DESC, 'SampleDesc'),
    (D3D12_TEXTURE_LAYOUT, 'Layout'),
    (D3D12_RESOURCE_FLAGS, 'Flags'),
    (D3D12_MIP_REGION, 'SamplerFeedbackMipRegion'),
])

D3D12_DEPTH_STENCIL_VALUE = Struct('D3D12_DEPTH_STENCIL_VALUE', [
    (FLOAT, 'Depth'),
    (UINT8, 'Stencil'),
])

D3D12_CLEAR_VALUE = Struct('D3D12_CLEAR_VALUE', [
    (DXGI_FORMAT, 'Format'),
    # FIXME: implement IsDepthStencilFormat
    (Union('FALSE /* IsDepthStencilFormat({self}.Format) */', [
        ('FALSE', Array(FLOAT, 4), 'Color'),
        ('TRUE', D3D12_DEPTH_STENCIL_VALUE, 'DepthStencil'),
    ]), None),
])

D3D12_RANGE = Struct('D3D12_RANGE', [
    (SIZE_T, 'Begin'),
    (SIZE_T, 'End'),
])

D3D12_RANGE_UINT64 = Struct('D3D12_RANGE_UINT64', [
    (UINT64, 'Begin'),
    (UINT64, 'End'),
])

D3D12_SUBRESOURCE_RANGE_UINT64 = Struct('D3D12_SUBRESOURCE_RANGE_UINT64', [
    (UINT, 'Subresource'),
    (D3D12_RANGE_UINT64, 'Range'),
])

D3D12_SUBRESOURCE_INFO = Struct('D3D12_SUBRESOURCE_INFO', [
    (UINT64, 'Offset'),
    (UINT, 'RowPitch'),
    (UINT, 'DepthPitch'),
])

D3D12_TILED_RESOURCE_COORDINATE = Struct('D3D12_TILED_RESOURCE_COORDINATE', [
    (UINT, 'X'),
    (UINT, 'Y'),
    (UINT, 'Z'),
    (UINT, 'Subresource'),
])

D3D12_TILE_REGION_SIZE = Struct('D3D12_TILE_REGION_SIZE', [
    (UINT, 'NumTiles'),
    (BOOL, 'UseBox'),
    (UINT, 'Width'),
    (UINT16, 'Height'),
    (UINT16, 'Depth'),
])

D3D12_TILE_RANGE_FLAGS = Enum('D3D12_TILE_RANGE_FLAGS', [
    'D3D12_TILE_RANGE_FLAG_NONE',
    'D3D12_TILE_RANGE_FLAG_NULL',
    'D3D12_TILE_RANGE_FLAG_SKIP',
    'D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE',
])

D3D12_SUBRESOURCE_TILING = Struct('D3D12_SUBRESOURCE_TILING', [
    (UINT, 'WidthInTiles'),
    (UINT16, 'HeightInTiles'),
    (UINT16, 'DepthInTiles'),
    (UINT, 'StartTileIndexInOverallResource'),
])

D3D12_TILE_SHAPE = Struct('D3D12_TILE_SHAPE', [
    (UINT, 'WidthInTexels'),
    (UINT, 'HeightInTexels'),
    (UINT, 'DepthInTexels'),
])

D3D12_PACKED_MIP_INFO = Struct('D3D12_PACKED_MIP_INFO', [
    (UINT8, 'NumStandardMips'),
    (UINT8, 'NumPackedMips'),
    (UINT, 'NumTilesForPackedMips'),
    (UINT, 'StartTileIndexInOverallResource'),
])

D3D12_TILE_MAPPING_FLAGS = EnumFlags('D3D12_TILE_MAPPING_FLAGS', [
    'D3D12_TILE_MAPPING_FLAG_NONE',
    'D3D12_TILE_MAPPING_FLAG_NO_HAZARD',
])

D3D12_TILE_COPY_FLAGS = EnumFlags('D3D12_TILE_COPY_FLAGS', [
    'D3D12_TILE_COPY_FLAG_NONE',
    'D3D12_TILE_COPY_FLAG_NO_HAZARD',
    'D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE',
    'D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER',
])

D3D12_RESOURCE_STATES = EnumFlags('D3D12_RESOURCE_STATES', [
    'D3D12_RESOURCE_STATE_COMMON',
    'D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER',
    'D3D12_RESOURCE_STATE_INDEX_BUFFER',
    'D3D12_RESOURCE_STATE_RENDER_TARGET',
    'D3D12_RESOURCE_STATE_UNORDERED_ACCESS',
    'D3D12_RESOURCE_STATE_DEPTH_WRITE',
    'D3D12_RESOURCE_STATE_DEPTH_READ',
    'D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE',
    'D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE',
    'D3D12_RESOURCE_STATE_STREAM_OUT',
    'D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT',
    'D3D12_RESOURCE_STATE_COPY_DEST',
    'D3D12_RESOURCE_STATE_COPY_SOURCE',
    'D3D12_RESOURCE_STATE_RESOLVE_DEST',
    'D3D12_RESOURCE_STATE_RESOLVE_SOURCE',
    'D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE',
    'D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE',
    'D3D12_RESOURCE_STATE_GENERIC_READ',
    'D3D12_RESOURCE_STATE_PRESENT',
    'D3D12_RESOURCE_STATE_PREDICATION',
    'D3D12_RESOURCE_STATE_VIDEO_DECODE_READ',
    'D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE',
    'D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ',
    'D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE',
    'D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ',
    'D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE',
])

D3D12_RESOURCE_BARRIER_TYPE = Enum('D3D12_RESOURCE_BARRIER_TYPE', [
    'D3D12_RESOURCE_BARRIER_TYPE_TRANSITION',
    'D3D12_RESOURCE_BARRIER_TYPE_ALIASING',
    'D3D12_RESOURCE_BARRIER_TYPE_UAV',
])

D3D12_RESOURCE_TRANSITION_BARRIER = Struct('D3D12_RESOURCE_TRANSITION_BARRIER', [
    (ObjPointer(ID3D12Resource), 'pResource'),
    (UINT, 'Subresource'),
    (D3D12_RESOURCE_STATES, 'StateBefore'),
    (D3D12_RESOURCE_STATES, 'StateAfter'),
])

D3D12_RESOURCE_ALIASING_BARRIER = Struct('D3D12_RESOURCE_ALIASING_BARRIER', [
    (ObjPointer(ID3D12Resource), 'pResourceBefore'),
    (ObjPointer(ID3D12Resource), 'pResourceAfter'),
])

D3D12_RESOURCE_UAV_BARRIER = Struct('D3D12_RESOURCE_UAV_BARRIER', [
    (ObjPointer(ID3D12Resource), 'pResource'),
])

D3D12_RESOURCE_BARRIER_FLAGS = EnumFlags('D3D12_RESOURCE_BARRIER_FLAGS', [
    'D3D12_RESOURCE_BARRIER_FLAG_NONE',
    'D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY',
    'D3D12_RESOURCE_BARRIER_FLAG_END_ONLY',
])

D3D12_RESOURCE_BARRIER = Struct('D3D12_RESOURCE_BARRIER', [
    (D3D12_RESOURCE_BARRIER_TYPE, 'Type'),
    (D3D12_RESOURCE_BARRIER_FLAGS, 'Flags'),
    (Union('{self}.Type', [
        ('D3D12_RESOURCE_BARRIER_TYPE_TRANSITION', D3D12_RESOURCE_TRANSITION_BARRIER, 'Transition'),
        ('D3D12_RESOURCE_BARRIER_TYPE_ALIASING', D3D12_RESOURCE_ALIASING_BARRIER, 'Aliasing'),
        ('D3D12_RESOURCE_BARRIER_TYPE_UAV', D3D12_RESOURCE_UAV_BARRIER, 'UAV'),
    ]), None),
])

D3D12_SUBRESOURCE_FOOTPRINT = Struct('D3D12_SUBRESOURCE_FOOTPRINT', [
    (DXGI_FORMAT, 'Format'),
    (UINT, 'Width'),
    (UINT, 'Height'),
    (UINT, 'Depth'),
    (UINT, 'RowPitch'),
])

D3D12_PLACED_SUBRESOURCE_FOOTPRINT = Struct('D3D12_PLACED_SUBRESOURCE_FOOTPRINT', [
    (UINT64, 'Offset'),
    (D3D12_SUBRESOURCE_FOOTPRINT, 'Footprint'),
])

D3D12_TEXTURE_COPY_TYPE = Enum('D3D12_TEXTURE_COPY_TYPE', [
    'D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX',
    'D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT',
])

D3D12_TEXTURE_COPY_LOCATION = Struct('D3D12_TEXTURE_COPY_LOCATION', [
    (ObjPointer(ID3D12Resource), 'pResource'),
    (D3D12_TEXTURE_COPY_TYPE, 'Type'),
    (Union('{self}.Type', [
        ('D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT', D3D12_PLACED_SUBRESOURCE_FOOTPRINT, 'PlacedFootprint'),
        ('D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX', UINT, 'SubresourceIndex'),
    ]), None),
])

D3D12_RESOLVE_MODE = Enum('D3D12_RESOLVE_MODE', [
    'D3D12_RESOLVE_MODE_DECOMPRESS',
    'D3D12_RESOLVE_MODE_MIN',
    'D3D12_RESOLVE_MODE_MAX',
    'D3D12_RESOLVE_MODE_AVERAGE',
    'D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK',
    'D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK',
])

D3D12_SAMPLE_POSITION = Struct('D3D12_SAMPLE_POSITION', [
    (INT8, 'X'),
    (INT8, 'Y'),
])

D3D12_VIEW_INSTANCE_LOCATION = Struct('D3D12_VIEW_INSTANCE_LOCATION', [
    (UINT, 'ViewportArrayIndex'),
    (UINT, 'RenderTargetArrayIndex'),
])

D3D12_VIEW_INSTANCING_FLAGS = Enum('D3D12_VIEW_INSTANCING_FLAGS', [
    'D3D12_VIEW_INSTANCING_FLAG_NONE',
    'D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING',
])

D3D12_VIEW_INSTANCING_DESC = Struct('D3D12_VIEW_INSTANCING_DESC', [
    (UINT, 'ViewInstanceCount'),
    (Pointer(Const(D3D12_VIEW_INSTANCE_LOCATION)), 'pViewInstanceLocations'),
    (D3D12_VIEW_INSTANCING_FLAGS, 'Flags'),
])

D3D12_SHADER_COMPONENT_MAPPING = Enum('D3D12_SHADER_COMPONENT_MAPPING', [
    'D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0',
    'D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1',
    'D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2',
    'D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3',
    'D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0',
    'D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1',
])

D3D12_BUFFER_SRV_FLAGS = EnumFlags('D3D12_BUFFER_SRV_FLAGS', [
    'D3D12_BUFFER_SRV_FLAG_NONE',
    'D3D12_BUFFER_SRV_FLAG_RAW',
])

D3D12_BUFFER_SRV = Struct('D3D12_BUFFER_SRV', [
    (UINT64, 'FirstElement'),
    (UINT, 'NumElements'),
    (UINT, 'StructureByteStride'),
    (D3D12_BUFFER_SRV_FLAGS, 'Flags'),
])

D3D12_TEX1D_SRV = Struct('D3D12_TEX1D_SRV', [
    (UINT, 'MostDetailedMip'),
    (UINT, 'MipLevels'),
    (FLOAT, 'ResourceMinLODClamp'),
])

D3D12_TEX1D_ARRAY_SRV = Struct('D3D12_TEX1D_ARRAY_SRV', [
    (UINT, 'MostDetailedMip'),
    (UINT, 'MipLevels'),
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
    (FLOAT, 'ResourceMinLODClamp'),
])

D3D12_TEX2D_SRV = Struct('D3D12_TEX2D_SRV', [
    (UINT, 'MostDetailedMip'),
    (UINT, 'MipLevels'),
    (UINT, 'PlaneSlice'),
    (FLOAT, 'ResourceMinLODClamp'),
])

D3D12_TEX2D_ARRAY_SRV = Struct('D3D12_TEX2D_ARRAY_SRV', [
    (UINT, 'MostDetailedMip'),
    (UINT, 'MipLevels'),
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
    (UINT, 'PlaneSlice'),
    (FLOAT, 'ResourceMinLODClamp'),
])

D3D12_TEX3D_SRV = Struct('D3D12_TEX3D_SRV', [
    (UINT, 'MostDetailedMip'),
    (UINT, 'MipLevels'),
    (FLOAT, 'ResourceMinLODClamp'),
])

D3D12_TEXCUBE_SRV = Struct('D3D12_TEXCUBE_SRV', [
    (UINT, 'MostDetailedMip'),
    (UINT, 'MipLevels'),
    (FLOAT, 'ResourceMinLODClamp'),
])

D3D12_TEXCUBE_ARRAY_SRV = Struct('D3D12_TEXCUBE_ARRAY_SRV', [
    (UINT, 'MostDetailedMip'),
    (UINT, 'MipLevels'),
    (UINT, 'First2DArrayFace'),
    (UINT, 'NumCubes'),
    (FLOAT, 'ResourceMinLODClamp'),
])

D3D12_TEX2DMS_SRV = Struct('D3D12_TEX2DMS_SRV', [
    (UINT, 'UnusedField_NothingToDefine'),
])

D3D12_TEX2DMS_ARRAY_SRV = Struct('D3D12_TEX2DMS_ARRAY_SRV', [
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV = Struct('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'Location'),
])

D3D12_SRV_DIMENSION = Enum('D3D12_SRV_DIMENSION', [
    'D3D12_SRV_DIMENSION_UNKNOWN',
    'D3D12_SRV_DIMENSION_BUFFER',
    'D3D12_SRV_DIMENSION_TEXTURE1D',
    'D3D12_SRV_DIMENSION_TEXTURE1DARRAY',
    'D3D12_SRV_DIMENSION_TEXTURE2D',
    'D3D12_SRV_DIMENSION_TEXTURE2DARRAY',
    'D3D12_SRV_DIMENSION_TEXTURE2DMS',
    'D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY',
    'D3D12_SRV_DIMENSION_TEXTURE3D',
    'D3D12_SRV_DIMENSION_TEXTURECUBE',
    'D3D12_SRV_DIMENSION_TEXTURECUBEARRAY',
    'D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE',
])

D3D12_SHADER_RESOURCE_VIEW_DESC = Struct('D3D12_SHADER_RESOURCE_VIEW_DESC', [
    (DXGI_FORMAT, 'Format'),
    (D3D12_SRV_DIMENSION, 'ViewDimension'),
    (UINT, 'Shader4ComponentMapping'),
    (Union('{self}.ViewDimension', [
        ('D3D12_SRV_DIMENSION_BUFFER', D3D12_BUFFER_SRV, 'Buffer'),
        ('D3D12_SRV_DIMENSION_TEXTURE1D', D3D12_TEX1D_SRV, 'Texture1D'),
        ('D3D12_SRV_DIMENSION_TEXTURE1DARRAY', D3D12_TEX1D_ARRAY_SRV, 'Texture1DArray'),
        ('D3D12_SRV_DIMENSION_TEXTURE2D', D3D12_TEX2D_SRV, 'Texture2D'),
        ('D3D12_SRV_DIMENSION_TEXTURE2DARRAY', D3D12_TEX2D_ARRAY_SRV, 'Texture2DArray'),
        ('D3D12_SRV_DIMENSION_TEXTURE2DMS', D3D12_TEX2DMS_SRV, 'Texture2DMS'),
        ('D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY', D3D12_TEX2DMS_ARRAY_SRV, 'Texture2DMSArray'),
        ('D3D12_SRV_DIMENSION_TEXTURE3D', D3D12_TEX3D_SRV, 'Texture3D'),
        ('D3D12_SRV_DIMENSION_TEXTURECUBE', D3D12_TEXCUBE_SRV, 'TextureCube'),
        ('D3D12_SRV_DIMENSION_TEXTURECUBEARRAY', D3D12_TEXCUBE_ARRAY_SRV, 'TextureCubeArray'),
        ('D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE', D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV, 'RaytracingAccelerationStructure'),
    ]), None),
])

D3D12_CONSTANT_BUFFER_VIEW_DESC = Struct('D3D12_CONSTANT_BUFFER_VIEW_DESC', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation'),
    (UINT, 'SizeInBytes'),
])

D3D12_FILTER = Enum('D3D12_FILTER', [
    'D3D12_FILTER_MIN_MAG_MIP_POINT',
    'D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR',
    'D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT',
    'D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR',
    'D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT',
    'D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR',
    'D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT',
    'D3D12_FILTER_MIN_MAG_MIP_LINEAR',
    'D3D12_FILTER_ANISOTROPIC',
    'D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT',
    'D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR',
    'D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT',
    'D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR',
    'D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT',
    'D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR',
    'D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT',
    'D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR',
    'D3D12_FILTER_COMPARISON_ANISOTROPIC',
    'D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT',
    'D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR',
    'D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT',
    'D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR',
    'D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT',
    'D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR',
    'D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT',
    'D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR',
    'D3D12_FILTER_MINIMUM_ANISOTROPIC',
    'D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT',
    'D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR',
    'D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT',
    'D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR',
    'D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT',
    'D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR',
    'D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT',
    'D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR',
    'D3D12_FILTER_MAXIMUM_ANISOTROPIC',
])

D3D12_FILTER_TYPE = Enum('D3D12_FILTER_TYPE', [
    'D3D12_FILTER_TYPE_POINT',
    'D3D12_FILTER_TYPE_LINEAR',
])

D3D12_FILTER_REDUCTION_TYPE = Enum('D3D12_FILTER_REDUCTION_TYPE', [
    'D3D12_FILTER_REDUCTION_TYPE_STANDARD',
    'D3D12_FILTER_REDUCTION_TYPE_COMPARISON',
    'D3D12_FILTER_REDUCTION_TYPE_MINIMUM',
    'D3D12_FILTER_REDUCTION_TYPE_MAXIMUM',
])

D3D12_TEXTURE_ADDRESS_MODE = Enum('D3D12_TEXTURE_ADDRESS_MODE', [
    'D3D12_TEXTURE_ADDRESS_MODE_WRAP',
    'D3D12_TEXTURE_ADDRESS_MODE_MIRROR',
    'D3D12_TEXTURE_ADDRESS_MODE_CLAMP',
    'D3D12_TEXTURE_ADDRESS_MODE_BORDER',
    'D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE',
])

D3D12_SAMPLER_DESC = Struct('D3D12_SAMPLER_DESC', [
    (D3D12_FILTER, 'Filter'),
    (D3D12_TEXTURE_ADDRESS_MODE, 'AddressU'),
    (D3D12_TEXTURE_ADDRESS_MODE, 'AddressV'),
    (D3D12_TEXTURE_ADDRESS_MODE, 'AddressW'),
    (FLOAT, 'MipLODBias'),
    (UINT, 'MaxAnisotropy'),
    (D3D12_COMPARISON_FUNC, 'ComparisonFunc'),
    (Array(FLOAT, 4), 'BorderColor'),
    (FLOAT, 'MinLOD'),
    (FLOAT, 'MaxLOD'),
])

D3D12_BUFFER_UAV_FLAGS = EnumFlags('D3D12_BUFFER_UAV_FLAGS', [
    'D3D12_BUFFER_UAV_FLAG_NONE',
    'D3D12_BUFFER_UAV_FLAG_RAW',
])

D3D12_BUFFER_UAV = Struct('D3D12_BUFFER_UAV', [
    (UINT64, 'FirstElement'),
    (UINT, 'NumElements'),
    (UINT, 'StructureByteStride'),
    (UINT64, 'CounterOffsetInBytes'),
    (D3D12_BUFFER_UAV_FLAGS, 'Flags'),
])

D3D12_TEX1D_UAV = Struct('D3D12_TEX1D_UAV', [
    (UINT, 'MipSlice'),
])

D3D12_TEX1D_ARRAY_UAV = Struct('D3D12_TEX1D_ARRAY_UAV', [
    (UINT, 'MipSlice'),
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
])

D3D12_TEX2D_UAV = Struct('D3D12_TEX2D_UAV', [
    (UINT, 'MipSlice'),
    (UINT, 'PlaneSlice'),
])

D3D12_TEX2D_ARRAY_UAV = Struct('D3D12_TEX2D_ARRAY_UAV', [
    (UINT, 'MipSlice'),
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
    (UINT, 'PlaneSlice'),
])

D3D12_TEX3D_UAV = Struct('D3D12_TEX3D_UAV', [
    (UINT, 'MipSlice'),
    (UINT, 'FirstWSlice'),
    (UINT, 'WSize'),
])

D3D12_UAV_DIMENSION = Enum('D3D12_UAV_DIMENSION', [
    'D3D12_UAV_DIMENSION_UNKNOWN',
    'D3D12_UAV_DIMENSION_BUFFER',
    'D3D12_UAV_DIMENSION_TEXTURE1D',
    'D3D12_UAV_DIMENSION_TEXTURE1DARRAY',
    'D3D12_UAV_DIMENSION_TEXTURE2D',
    'D3D12_UAV_DIMENSION_TEXTURE2DARRAY',
    'D3D12_UAV_DIMENSION_TEXTURE3D',
])

D3D12_UNORDERED_ACCESS_VIEW_DESC = Struct('D3D12_UNORDERED_ACCESS_VIEW_DESC', [
    (DXGI_FORMAT, 'Format'),
    (D3D12_UAV_DIMENSION, 'ViewDimension'),
    (Union('{self}.ViewDimension', [
        ('D3D12_UAV_DIMENSION_BUFFER', D3D12_BUFFER_UAV, 'Buffer'),
        ('D3D12_UAV_DIMENSION_TEXTURE1D', D3D12_TEX1D_UAV, 'Texture1D'),
        ('D3D12_UAV_DIMENSION_TEXTURE1DARRAY', D3D12_TEX1D_ARRAY_UAV, 'Texture1DArray'),
        ('D3D12_UAV_DIMENSION_TEXTURE2D', D3D12_TEX2D_UAV, 'Texture2D'),
        ('D3D12_UAV_DIMENSION_TEXTURE2DARRAY', D3D12_TEX2D_ARRAY_UAV, 'Texture2DArray'),
        ('D3D12_UAV_DIMENSION_TEXTURE3D', D3D12_TEX3D_UAV, 'Texture3D'),
    ]), None),
])

D3D12_BUFFER_RTV = Struct('D3D12_BUFFER_RTV', [
    (UINT64, 'FirstElement'),
    (UINT, 'NumElements'),
])

D3D12_TEX1D_RTV = Struct('D3D12_TEX1D_RTV', [
    (UINT, 'MipSlice'),
])

D3D12_TEX1D_ARRAY_RTV = Struct('D3D12_TEX1D_ARRAY_RTV', [
    (UINT, 'MipSlice'),
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
])

D3D12_TEX2D_RTV = Struct('D3D12_TEX2D_RTV', [
    (UINT, 'MipSlice'),
    (UINT, 'PlaneSlice'),
])

D3D12_TEX2DMS_RTV = Struct('D3D12_TEX2DMS_RTV', [
    (UINT, 'UnusedField_NothingToDefine'),
])

D3D12_TEX2D_ARRAY_RTV = Struct('D3D12_TEX2D_ARRAY_RTV', [
    (UINT, 'MipSlice'),
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
    (UINT, 'PlaneSlice'),
])

D3D12_TEX2DMS_ARRAY_RTV = Struct('D3D12_TEX2DMS_ARRAY_RTV', [
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
])

D3D12_TEX3D_RTV = Struct('D3D12_TEX3D_RTV', [
    (UINT, 'MipSlice'),
    (UINT, 'FirstWSlice'),
    (UINT, 'WSize'),
])

D3D12_RTV_DIMENSION = Enum('D3D12_RTV_DIMENSION', [
    'D3D12_RTV_DIMENSION_UNKNOWN',
    'D3D12_RTV_DIMENSION_BUFFER',
    'D3D12_RTV_DIMENSION_TEXTURE1D',
    'D3D12_RTV_DIMENSION_TEXTURE1DARRAY',
    'D3D12_RTV_DIMENSION_TEXTURE2D',
    'D3D12_RTV_DIMENSION_TEXTURE2DARRAY',
    'D3D12_RTV_DIMENSION_TEXTURE2DMS',
    'D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY',
    'D3D12_RTV_DIMENSION_TEXTURE3D',
])

D3D12_RENDER_TARGET_VIEW_DESC = Struct('D3D12_RENDER_TARGET_VIEW_DESC', [
    (DXGI_FORMAT, 'Format'),
    (D3D12_RTV_DIMENSION, 'ViewDimension'),
    (Union('{self}.ViewDimension', [
        ('D3D12_RTV_DIMENSION_BUFFER', D3D12_BUFFER_RTV, 'Buffer'),
        ('D3D12_RTV_DIMENSION_TEXTURE1D', D3D12_TEX1D_RTV, 'Texture1D'),
        ('D3D12_RTV_DIMENSION_TEXTURE1DARRAY', D3D12_TEX1D_ARRAY_RTV, 'Texture1DArray'),
        ('D3D12_RTV_DIMENSION_TEXTURE2D', D3D12_TEX2D_RTV, 'Texture2D'),
        ('D3D12_RTV_DIMENSION_TEXTURE2DARRAY', D3D12_TEX2D_ARRAY_RTV, 'Texture2DArray'),
        ('D3D12_RTV_DIMENSION_TEXTURE2DMS', D3D12_TEX2DMS_RTV, 'Texture2DMS'),
        ('D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY', D3D12_TEX2DMS_ARRAY_RTV, 'Texture2DMSArray'),
        ('D3D12_RTV_DIMENSION_TEXTURE3D', D3D12_TEX3D_RTV, 'Texture3D'),
    ]), None),
])

D3D12_TEX1D_DSV = Struct('D3D12_TEX1D_DSV', [
    (UINT, 'MipSlice'),
])

D3D12_TEX1D_ARRAY_DSV = Struct('D3D12_TEX1D_ARRAY_DSV', [
    (UINT, 'MipSlice'),
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
])

D3D12_TEX2D_DSV = Struct('D3D12_TEX2D_DSV', [
    (UINT, 'MipSlice'),
])

D3D12_TEX2D_ARRAY_DSV = Struct('D3D12_TEX2D_ARRAY_DSV', [
    (UINT, 'MipSlice'),
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
])

D3D12_TEX2DMS_DSV = Struct('D3D12_TEX2DMS_DSV', [
    (UINT, 'UnusedField_NothingToDefine'),
])

D3D12_TEX2DMS_ARRAY_DSV = Struct('D3D12_TEX2DMS_ARRAY_DSV', [
    (UINT, 'FirstArraySlice'),
    (UINT, 'ArraySize'),
])

D3D12_DSV_FLAGS = EnumFlags('D3D12_DSV_FLAGS', [
    'D3D12_DSV_FLAG_NONE',
    'D3D12_DSV_FLAG_READ_ONLY_DEPTH',
    'D3D12_DSV_FLAG_READ_ONLY_STENCIL',
])

D3D12_DSV_DIMENSION = Enum('D3D12_DSV_DIMENSION', [
    'D3D12_DSV_DIMENSION_UNKNOWN',
    'D3D12_DSV_DIMENSION_TEXTURE1D',
    'D3D12_DSV_DIMENSION_TEXTURE1DARRAY',
    'D3D12_DSV_DIMENSION_TEXTURE2D',
    'D3D12_DSV_DIMENSION_TEXTURE2DARRAY',
    'D3D12_DSV_DIMENSION_TEXTURE2DMS',
    'D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY',
])

D3D12_DEPTH_STENCIL_VIEW_DESC = Struct('D3D12_DEPTH_STENCIL_VIEW_DESC', [
    (DXGI_FORMAT, 'Format'),
    (D3D12_DSV_DIMENSION, 'ViewDimension'),
    (D3D12_DSV_FLAGS, 'Flags'),
    (Union('{self}.ViewDimension', [
        ('D3D12_DSV_DIMENSION_TEXTURE1D', D3D12_TEX1D_DSV, 'Texture1D'),
        ('D3D12_DSV_DIMENSION_TEXTURE1DARRAY', D3D12_TEX1D_ARRAY_DSV, 'Texture1DArray'),
        ('D3D12_DSV_DIMENSION_TEXTURE2D', D3D12_TEX2D_DSV, 'Texture2D'),
        ('D3D12_DSV_DIMENSION_TEXTURE2DARRAY', D3D12_TEX2D_ARRAY_DSV, 'Texture2DArray'),
        ('D3D12_DSV_DIMENSION_TEXTURE2DMS', D3D12_TEX2DMS_DSV, 'Texture2DMS'),
        ('D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY', D3D12_TEX2DMS_ARRAY_DSV, 'Texture2DMSArray'),
    ]), None),
])

D3D12_CLEAR_FLAGS = EnumFlags('D3D12_CLEAR_FLAGS', [
    'D3D12_CLEAR_FLAG_DEPTH',
    'D3D12_CLEAR_FLAG_STENCIL',
])

D3D12_FENCE_FLAGS = EnumFlags('D3D12_FENCE_FLAGS', [
    'D3D12_FENCE_FLAG_NONE',
    'D3D12_FENCE_FLAG_SHARED',
    'D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER',
    'D3D12_FENCE_FLAG_NON_MONITORED',
])

D3D12_DESCRIPTOR_HEAP_TYPE = Enum('D3D12_DESCRIPTOR_HEAP_TYPE', [
    'D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV',
    'D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER',
    'D3D12_DESCRIPTOR_HEAP_TYPE_RTV',
    'D3D12_DESCRIPTOR_HEAP_TYPE_DSV',
    'D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES',
])

D3D12_DESCRIPTOR_HEAP_FLAGS = EnumFlags('D3D12_DESCRIPTOR_HEAP_FLAGS', [
    'D3D12_DESCRIPTOR_HEAP_FLAG_NONE',
    'D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE',
])

D3D12_DESCRIPTOR_HEAP_DESC = Struct('D3D12_DESCRIPTOR_HEAP_DESC', [
    (D3D12_DESCRIPTOR_HEAP_TYPE, 'Type'),
    (UINT, 'NumDescriptors'),
    (D3D12_DESCRIPTOR_HEAP_FLAGS, 'Flags'),
    (UINT, 'NodeMask'),
])

D3D12_DESCRIPTOR_RANGE_TYPE = Enum('D3D12_DESCRIPTOR_RANGE_TYPE', [
    'D3D12_DESCRIPTOR_RANGE_TYPE_SRV',
    'D3D12_DESCRIPTOR_RANGE_TYPE_UAV',
    'D3D12_DESCRIPTOR_RANGE_TYPE_CBV',
    'D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER',
])

D3D12_DESCRIPTOR_RANGE = Struct('D3D12_DESCRIPTOR_RANGE', [
    (D3D12_DESCRIPTOR_RANGE_TYPE, 'RangeType'),
    (UINT, 'NumDescriptors'),
    (UINT, 'BaseShaderRegister'),
    (UINT, 'RegisterSpace'),
    (UINT, 'OffsetInDescriptorsFromTableStart'),
])

D3D12_ROOT_DESCRIPTOR_TABLE = Struct('D3D12_ROOT_DESCRIPTOR_TABLE', [
    (UINT, 'NumDescriptorRanges'),
    (Array(Const(D3D12_DESCRIPTOR_RANGE), '{self}.NumDescriptorRanges'), 'pDescriptorRanges'),
])

D3D12_ROOT_CONSTANTS = Struct('D3D12_ROOT_CONSTANTS', [
    (UINT, 'ShaderRegister'),
    (UINT, 'RegisterSpace'),
    (UINT, 'Num32BitValues'),
])

D3D12_ROOT_DESCRIPTOR = Struct('D3D12_ROOT_DESCRIPTOR', [
    (UINT, 'ShaderRegister'),
    (UINT, 'RegisterSpace'),
])

D3D12_SHADER_VISIBILITY = Enum('D3D12_SHADER_VISIBILITY', [
    'D3D12_SHADER_VISIBILITY_ALL',
    'D3D12_SHADER_VISIBILITY_VERTEX',
    'D3D12_SHADER_VISIBILITY_HULL',
    'D3D12_SHADER_VISIBILITY_DOMAIN',
    'D3D12_SHADER_VISIBILITY_GEOMETRY',
    'D3D12_SHADER_VISIBILITY_PIXEL',
    'D3D12_SHADER_VISIBILITY_AMPLIFICATION',
    'D3D12_SHADER_VISIBILITY_MESH',
])

D3D12_ROOT_PARAMETER_TYPE = Enum('D3D12_ROOT_PARAMETER_TYPE', [
    'D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE',
    'D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS',
    'D3D12_ROOT_PARAMETER_TYPE_CBV',
    'D3D12_ROOT_PARAMETER_TYPE_SRV',
    'D3D12_ROOT_PARAMETER_TYPE_UAV',
])

D3D12_ROOT_PARAMETER = Struct('D3D12_ROOT_PARAMETER', [
    (D3D12_ROOT_PARAMETER_TYPE, 'ParameterType'),
    (Union('{self}.ParameterType', [
        ('D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE', D3D12_ROOT_DESCRIPTOR_TABLE, 'DescriptorTable'),
        ('D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS', D3D12_ROOT_CONSTANTS, 'Constants'),
        ('D3D12_ROOT_PARAMETER_TYPE_CBV', D3D12_ROOT_DESCRIPTOR, 'Descriptor'),
        ('D3D12_ROOT_PARAMETER_TYPE_SRV', D3D12_ROOT_DESCRIPTOR, 'Descriptor'),
        ('D3D12_ROOT_PARAMETER_TYPE_UAV', D3D12_ROOT_DESCRIPTOR, 'Descriptor'),
    ]), None),
    (D3D12_SHADER_VISIBILITY, 'ShaderVisibility'),
])

D3D12_ROOT_SIGNATURE_FLAGS = Enum('D3D12_ROOT_SIGNATURE_FLAGS', [
    'D3D12_ROOT_SIGNATURE_FLAG_NONE',
    'D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT',
    'D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS',
    'D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS',
    'D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS',
    'D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS',
    'D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS',
    'D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT',
    'D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE',
    'D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS',
    'D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS',
])

D3D12_STATIC_BORDER_COLOR = Enum('D3D12_STATIC_BORDER_COLOR', [
    'D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK',
    'D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK',
    'D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE',
])

D3D12_STATIC_SAMPLER_DESC = Struct('D3D12_STATIC_SAMPLER_DESC', [
    (D3D12_FILTER, 'Filter'),
    (D3D12_TEXTURE_ADDRESS_MODE, 'AddressU'),
    (D3D12_TEXTURE_ADDRESS_MODE, 'AddressV'),
    (D3D12_TEXTURE_ADDRESS_MODE, 'AddressW'),
    (FLOAT, 'MipLODBias'),
    (UINT, 'MaxAnisotropy'),
    (D3D12_COMPARISON_FUNC, 'ComparisonFunc'),
    (D3D12_STATIC_BORDER_COLOR, 'BorderColor'),
    (FLOAT, 'MinLOD'),
    (FLOAT, 'MaxLOD'),
    (UINT, 'ShaderRegister'),
    (UINT, 'RegisterSpace'),
    (D3D12_SHADER_VISIBILITY, 'ShaderVisibility'),
])

D3D12_ROOT_SIGNATURE_DESC = Struct('D3D12_ROOT_SIGNATURE_DESC', [
    (UINT, 'NumParameters'),
    (Array(Const(D3D12_ROOT_PARAMETER), '{self}.NumParameters'), 'pParameters'),
    (UINT, 'NumStaticSamplers'),
    (Array(Const(D3D12_STATIC_SAMPLER_DESC), '{self}.NumStaticSamplers'), 'pStaticSamplers'),
    (D3D12_ROOT_SIGNATURE_FLAGS, 'Flags'),
])

D3D12_DESCRIPTOR_RANGE_FLAGS = EnumFlags('D3D12_DESCRIPTOR_RANGE_FLAGS', [
    'D3D12_DESCRIPTOR_RANGE_FLAG_NONE',
    'D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE',
    'D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE',
    'D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE',
    'D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC',
    'D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS',
])

D3D12_DESCRIPTOR_RANGE1 = Struct('D3D12_DESCRIPTOR_RANGE1', [
    (D3D12_DESCRIPTOR_RANGE_TYPE, 'RangeType'),
    (UINT, 'NumDescriptors'),
    (UINT, 'BaseShaderRegister'),
    (UINT, 'RegisterSpace'),
    (D3D12_DESCRIPTOR_RANGE_FLAGS, 'Flags'),
    (UINT, 'OffsetInDescriptorsFromTableStart'),
])

D3D12_ROOT_DESCRIPTOR_TABLE1 = Struct('D3D12_ROOT_DESCRIPTOR_TABLE1', [
    (UINT, 'NumDescriptorRanges'),
    (Array(Const(D3D12_DESCRIPTOR_RANGE1), '{self}.NumDescriptorRanges'), 'pDescriptorRanges'),
])

D3D12_ROOT_DESCRIPTOR_FLAGS = EnumFlags('D3D12_ROOT_DESCRIPTOR_FLAGS', [
    'D3D12_ROOT_DESCRIPTOR_FLAG_NONE',
    'D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE',
    'D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE',
    'D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC',
])

D3D12_ROOT_DESCRIPTOR1 = Struct('D3D12_ROOT_DESCRIPTOR1', [
    (UINT, 'ShaderRegister'),
    (UINT, 'RegisterSpace'),
    (D3D12_ROOT_DESCRIPTOR_FLAGS, 'Flags'),
])

D3D12_ROOT_PARAMETER1 = Struct('D3D12_ROOT_PARAMETER1', [
    (D3D12_ROOT_PARAMETER_TYPE, 'ParameterType'),
    (Union('{self}.ParameterType', [
        ('D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE', D3D12_ROOT_DESCRIPTOR_TABLE1, 'DescriptorTable'),
        ('D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS', D3D12_ROOT_CONSTANTS, 'Constants'),
        ('D3D12_ROOT_PARAMETER_TYPE_CBV', D3D12_ROOT_DESCRIPTOR1, 'Descriptor'),
        ('D3D12_ROOT_PARAMETER_TYPE_SRV', D3D12_ROOT_DESCRIPTOR1, 'Descriptor'),
        ('D3D12_ROOT_PARAMETER_TYPE_UAV', D3D12_ROOT_DESCRIPTOR1, 'Descriptor'),
    ]), None),
    (D3D12_SHADER_VISIBILITY, 'ShaderVisibility'),
])

D3D12_ROOT_SIGNATURE_DESC1 = Struct('D3D12_ROOT_SIGNATURE_DESC1', [
    (UINT, 'NumParameters'),
    (Array(Const(D3D12_ROOT_PARAMETER1), '{self}.NumParameters'), 'pParameters'),
    (UINT, 'NumStaticSamplers'),
    (Array(Const(D3D12_STATIC_SAMPLER_DESC), '{self}.NumStaticSamplers'), 'pStaticSamplers'),
    (D3D12_ROOT_SIGNATURE_FLAGS, 'Flags'),
])

D3D12_VERSIONED_ROOT_SIGNATURE_DESC = Struct('D3D12_VERSIONED_ROOT_SIGNATURE_DESC', [
    (D3D_ROOT_SIGNATURE_VERSION, 'Version'),
    (Union("{self}.Version", [
        ('D3D_ROOT_SIGNATURE_VERSION_1_0', D3D12_ROOT_SIGNATURE_DESC, 'Desc_1_0'),
        ('D3D_ROOT_SIGNATURE_VERSION_1_1', D3D12_ROOT_SIGNATURE_DESC1, 'Desc_1_1'),
    ]), None),
])

D3D12_CPU_DESCRIPTOR_HANDLE = Struct('D3D12_CPU_DESCRIPTOR_HANDLE', [
    (SIZE_T, 'ptr'),
])

D3D12_GPU_DESCRIPTOR_HANDLE = Struct('D3D12_GPU_DESCRIPTOR_HANDLE', [
    (UINT64, 'ptr'),
])

D3D12_DISCARD_REGION = Struct('D3D12_DISCARD_REGION', [
    (UINT, 'NumRects'),
    (Array(Const(D3D12_RECT), '{self}.NumRects'), 'pRects'),
    (UINT, 'FirstSubresource'),
    (UINT, 'NumSubresources'),
])

D3D12_QUERY_HEAP_TYPE = Enum('D3D12_QUERY_HEAP_TYPE', [
    'D3D12_QUERY_HEAP_TYPE_OCCLUSION',
    'D3D12_QUERY_HEAP_TYPE_TIMESTAMP',
    'D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS',
    'D3D12_QUERY_HEAP_TYPE_SO_STATISTICS',
    'D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS',
    'D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP',
])

D3D12_QUERY_HEAP_DESC = Struct('D3D12_QUERY_HEAP_DESC', [
    (D3D12_QUERY_HEAP_TYPE, 'Type'),
    (UINT, 'Count'),
    (UINT, 'NodeMask'),
])

D3D12_QUERY_TYPE = Enum('D3D12_QUERY_TYPE', [
    'D3D12_QUERY_TYPE_OCCLUSION',
    'D3D12_QUERY_TYPE_BINARY_OCCLUSION',
    'D3D12_QUERY_TYPE_TIMESTAMP',
    'D3D12_QUERY_TYPE_PIPELINE_STATISTICS',
    'D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0',
    'D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1',
    'D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2',
    'D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3',
    'D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS',
])

D3D12_PREDICATION_OP = Enum('D3D12_PREDICATION_OP', [
    'D3D12_PREDICATION_OP_EQUAL_ZERO',
    'D3D12_PREDICATION_OP_NOT_EQUAL_ZERO',
])

D3D12_QUERY_DATA_PIPELINE_STATISTICS = Struct('D3D12_QUERY_DATA_PIPELINE_STATISTICS', [
    (UINT64, 'IAVertices'),
    (UINT64, 'IAPrimitives'),
    (UINT64, 'VSInvocations'),
    (UINT64, 'GSInvocations'),
    (UINT64, 'GSPrimitives'),
    (UINT64, 'CInvocations'),
    (UINT64, 'CPrimitives'),
    (UINT64, 'PSInvocations'),
    (UINT64, 'HSInvocations'),
    (UINT64, 'DSInvocations'),
    (UINT64, 'CSInvocations'),
])

D3D12_QUERY_DATA_SO_STATISTICS = Struct('D3D12_QUERY_DATA_SO_STATISTICS', [
    (UINT64, 'NumPrimitivesWritten'),
    (UINT64, 'PrimitivesStorageNeeded'),
])

D3D12_STREAM_OUTPUT_BUFFER_VIEW = Struct('D3D12_STREAM_OUTPUT_BUFFER_VIEW', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation'),
    (UINT64, 'SizeInBytes'),
    (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferFilledSizeLocation'),
])

D3D12_DRAW_ARGUMENTS = Struct('D3D12_DRAW_ARGUMENTS', [
    (UINT, 'VertexCountPerInstance'),
    (UINT, 'InstanceCount'),
    (UINT, 'StartVertexLocation'),
    (UINT, 'StartInstanceLocation'),
])

D3D12_DRAW_INDEXED_ARGUMENTS = Struct('D3D12_DRAW_INDEXED_ARGUMENTS', [
    (UINT, 'IndexCountPerInstance'),
    (UINT, 'InstanceCount'),
    (UINT, 'StartIndexLocation'),
    (INT, 'BaseVertexLocation'),
    (UINT, 'StartInstanceLocation'),
])

D3D12_DISPATCH_ARGUMENTS = Struct('D3D12_DISPATCH_ARGUMENTS', [
    (UINT, 'ThreadGroupCountX'),
    (UINT, 'ThreadGroupCountY'),
    (UINT, 'ThreadGroupCountZ'),
])

D3D12_VERTEX_BUFFER_VIEW = Struct('D3D12_VERTEX_BUFFER_VIEW', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation'),
    (UINT, 'SizeInBytes'),
    (UINT, 'StrideInBytes'),
])

D3D12_INDEX_BUFFER_VIEW = Struct('D3D12_INDEX_BUFFER_VIEW', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation'),
    (UINT, 'SizeInBytes'),
    (DXGI_FORMAT, 'Format'),
])

D3D12_INDIRECT_ARGUMENT_TYPE = Enum('D3D12_INDIRECT_ARGUMENT_TYPE', [
    'D3D12_INDIRECT_ARGUMENT_TYPE_DRAW',
    'D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED',
    'D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH',
    'D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW',
    'D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW',
    'D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT',
    'D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW',
    'D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW',
    'D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW',
    'D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS',
    'D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH',
])

D3D12_INDIRECT_ARGUMENT_DESC = Struct('D3D12_INDIRECT_ARGUMENT_DESC', [
    (D3D12_INDIRECT_ARGUMENT_TYPE, 'Type'),
    (Union('{self}.Type', [
        ('D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW', Struct(None, [
            (UINT, 'Slot'),
        ]), 'VertexBuffer'),
        ('D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT', Struct(None, [
            (UINT, 'RootParameterIndex'),
            (UINT, 'DestOffsetIn32BitValues'),
            (UINT, 'Num32BitValuesToSet'),
        ]), 'Constant'),
        ('D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW', Struct(None, [
            (UINT, 'RootParameterIndex'),
        ]), 'ConstantBufferView'),
        ('D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW', Struct(None, [
            (UINT, 'RootParameterIndex'),
        ]), 'ShaderResourceView'),
        ('D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW', Struct(None, [
            (UINT, 'RootParameterIndex'),
        ]), 'UnorderedAccessView'),
    ]), None),
])

D3D12_COMMAND_SIGNATURE_DESC = Struct('D3D12_COMMAND_SIGNATURE_DESC', [
    (UINT, 'ByteStride'),
    (UINT, 'NumArgumentDescs'),
    (Array(Const(D3D12_INDIRECT_ARGUMENT_DESC), '{self}.NumArgumentDescs'), 'pArgumentDescs'),
    (UINT, 'NodeMask'),
])

D3D12_WRITEBUFFERIMMEDIATE_PARAMETER = Struct('D3D12_WRITEBUFFERIMMEDIATE_PARAMETER', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'Dest'),
    (UINT32, 'Value'),
])

D3D12_WRITEBUFFERIMMEDIATE_MODE = Enum('D3D12_WRITEBUFFERIMMEDIATE_MODE', [
    'D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT',
    'D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN',
    'D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT',
])

D3D12_MULTIPLE_FENCE_WAIT_FLAGS = EnumFlags('D3D12_MULTIPLE_FENCE_WAIT_FLAGS', [
    'D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE',
    'D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY',
    'D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL',
])

D3D12_RESIDENCY_PRIORITY = Enum('D3D12_RESIDENCY_PRIORITY', [
    'D3D12_RESIDENCY_PRIORITY_MINIMUM',
    'D3D12_RESIDENCY_PRIORITY_LOW',
    'D3D12_RESIDENCY_PRIORITY_NORMAL',
    'D3D12_RESIDENCY_PRIORITY_HIGH',
    'D3D12_RESIDENCY_PRIORITY_MAXIMUM',
])

D3D12_RESIDENCY_FLAGS = Enum('D3D12_RESIDENCY_FLAGS', [
    'D3D12_RESIDENCY_FLAG_NONE',
    'D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET',
])

D3D12_COMMAND_LIST_FLAGS = Enum('D3D12_COMMAND_LIST_FLAGS', [
    'D3D12_COMMAND_LIST_FLAG_NONE',
])

D3D12_COMMAND_POOL_FLAGS = Enum('D3D12_COMMAND_POOL_FLAGS', [
    'D3D12_COMMAND_POOL_FLAG_NONE',
])

D3D12_COMMAND_RECORDER_FLAGS = Enum('D3D12_COMMAND_RECORDER_FLAGS', [
    'D3D12_COMMAND_RECORDER_FLAG_NONE',
])

D3D12_PROTECTED_SESSION_STATUS = Enum('D3D12_PROTECTED_SESSION_STATUS', [
    'D3D12_PROTECTED_SESSION_STATUS_OK',
    'D3D12_PROTECTED_SESSION_STATUS_INVALID',
])

D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS = EnumFlags('D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS', [
    'D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE',
    'D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED',
])

D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT = Struct('D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT', [
    (UINT, 'NodeIndex'),
    (D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS, 'Support'),
])

D3D12_PROTECTED_RESOURCE_SESSION_FLAGS = EnumFlags('D3D12_PROTECTED_RESOURCE_SESSION_FLAGS', [
    'D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE',
])

D3D12_PROTECTED_RESOURCE_SESSION_DESC = Struct('D3D12_PROTECTED_RESOURCE_SESSION_DESC', [
    (UINT, 'NodeMask'),
    (D3D12_PROTECTED_RESOURCE_SESSION_FLAGS, 'Flags'),
])

D3D12_LIFETIME_STATE = Enum('D3D12_LIFETIME_STATE', [
    'D3D12_LIFETIME_STATE_IN_USE',
    'D3D12_LIFETIME_STATE_NOT_IN_USE',
])

D3D12_META_COMMAND_PARAMETER_TYPE = Enum('D3D12_META_COMMAND_PARAMETER_TYPE', [
    'D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT',
    'D3D12_META_COMMAND_PARAMETER_TYPE_UINT64',
    'D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS',
    'D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV',
    'D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV',
])

D3D12_META_COMMAND_PARAMETER_FLAGS = EnumFlags('D3D12_META_COMMAND_PARAMETER_FLAGS', [
    'D3D12_META_COMMAND_PARAMETER_FLAG_INPUT',
    'D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT',
])

D3D12_META_COMMAND_PARAMETER_STAGE = Enum('D3D12_META_COMMAND_PARAMETER_STAGE', [
    'D3D12_META_COMMAND_PARAMETER_STAGE_CREATION',
    'D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION',
    'D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION',
])

D3D12_META_COMMAND_PARAMETER_DESC = Struct('D3D12_META_COMMAND_PARAMETER_DESC', [
    (LPCWSTR, 'Name'),
    (D3D12_META_COMMAND_PARAMETER_TYPE, 'Type'),
    (D3D12_META_COMMAND_PARAMETER_FLAGS, 'Flags'),
    (D3D12_RESOURCE_STATES, 'RequiredResourceState'),
    (UINT, 'StructureOffset'),
])

D3D12_GRAPHICS_STATES = EnumFlags('D3D12_GRAPHICS_STATES', [
    'D3D12_GRAPHICS_STATE_NONE',
    'D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS',
    'D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER',
    'D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY',
    'D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP',
    'D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE',
    'D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE',
    'D3D12_GRAPHICS_STATE_RS_VIEWPORTS',
    'D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS',
    'D3D12_GRAPHICS_STATE_PREDICATION',
    'D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS',
    'D3D12_GRAPHICS_STATE_OM_STENCIL_REF',
    'D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR',
    'D3D12_GRAPHICS_STATE_PIPELINE_STATE',
    'D3D12_GRAPHICS_STATE_SO_TARGETS',
    'D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS',
    'D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS',
    'D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK',
])

D3D12_META_COMMAND_DESC = Struct('D3D12_META_COMMAND_DESC', [
    (GUID, 'Id'),
    (LPCWSTR, 'Name'),
    (D3D12_GRAPHICS_STATES, 'InitializationDirtyState'),
    (D3D12_GRAPHICS_STATES, 'ExecutionDirtyState'),
])

D3D12_STATE_SUBOBJECT_TYPE = Enum('D3D12_STATE_SUBOBJECT_TYPE', [
    'D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG',
    'D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE',
    'D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE',
    'D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK',
    'D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY',
    'D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION',
    'D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION',
    'D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION',
    'D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG',
    'D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG',
    'D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP',
    'D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1',
    'D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID',
])

D3D12_STATE_SUBOBJECT = Struct('D3D12_STATE_SUBOBJECT', [
    (D3D12_STATE_SUBOBJECT_TYPE, 'Type'),
    (OpaquePointer(Const(Void)), 'pDesc'),
])

D3D12_STATE_OBJECT_FLAGS = EnumFlags('D3D12_STATE_OBJECT_FLAGS', [
    'D3D12_STATE_OBJECT_FLAG_NONE',
    'D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS',
    'D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS',
    'D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS',
])

D3D12_STATE_OBJECT_CONFIG = Struct('D3D12_STATE_OBJECT_CONFIG', [
    (D3D12_STATE_OBJECT_FLAGS, 'Flags'),
])

D3D12_GLOBAL_ROOT_SIGNATURE = Struct('D3D12_GLOBAL_ROOT_SIGNATURE', [
    (ObjPointer(ID3D12RootSignature), 'pGlobalRootSignature'),
])

D3D12_LOCAL_ROOT_SIGNATURE = Struct('D3D12_LOCAL_ROOT_SIGNATURE', [
    (ObjPointer(ID3D12RootSignature), 'pLocalRootSignature'),
])

D3D12_NODE_MASK = Struct('D3D12_NODE_MASK', [
    (UINT, 'NodeMask'),
])

D3D12_EXPORT_FLAGS = EnumFlags('D3D12_EXPORT_FLAGS', [
    'D3D12_EXPORT_FLAG_NONE',
])

D3D12_EXPORT_DESC = Struct('D3D12_EXPORT_DESC', [
    (LPCWSTR, 'Name'),
    (LPCWSTR, 'ExportToRename'),
    (D3D12_EXPORT_FLAGS, 'Flags'),
])

D3D12_DXIL_LIBRARY_DESC = Struct('D3D12_DXIL_LIBRARY_DESC', [
    (D3D12_SHADER_BYTECODE, 'DXILLibrary'),
    (UINT, 'NumExports'),
    (Array(D3D12_EXPORT_DESC, '{self}.NumExports'), 'pExports'),
])

D3D12_EXISTING_COLLECTION_DESC = Struct('D3D12_EXISTING_COLLECTION_DESC', [
    (ObjPointer(ID3D12StateObject), 'pExistingCollection'),
    (UINT, 'NumExports'),
    (Array(D3D12_EXPORT_DESC, '{self}.NumExports'), 'pExports'),
])

D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION = Struct('D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION', [
    (Pointer(Const(D3D12_STATE_SUBOBJECT)), 'pSubobjectToAssociate'),
    (UINT, 'NumExports'),
    (Array(LPCWSTR, '{self}.NumExports'), 'pExports'),
])

D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = Struct('D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION', [
    (LPCWSTR, 'SubobjectToAssociate'),
    (UINT, 'NumExports'),
    (Array(LPCWSTR, '{self}.NumExports'), 'pExports'),
])

D3D12_HIT_GROUP_TYPE = Enum('D3D12_HIT_GROUP_TYPE', [
    'D3D12_HIT_GROUP_TYPE_TRIANGLES',
    'D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE',
])

D3D12_HIT_GROUP_DESC = Struct('D3D12_HIT_GROUP_DESC', [
    (LPCWSTR, 'HitGroupExport'),
    (D3D12_HIT_GROUP_TYPE, 'Type'),
    (LPCWSTR, 'AnyHitShaderImport'),
    (LPCWSTR, 'ClosestHitShaderImport'),
    (LPCWSTR, 'IntersectionShaderImport'),
])

D3D12_RAYTRACING_SHADER_CONFIG = Struct('D3D12_RAYTRACING_SHADER_CONFIG', [
    (UINT, 'MaxPayloadSizeInBytes'),
    (UINT, 'MaxAttributeSizeInBytes'),
])

D3D12_RAYTRACING_PIPELINE_CONFIG = Struct('D3D12_RAYTRACING_PIPELINE_CONFIG', [
    (UINT, 'MaxTraceRecursionDepth'),
])

D3D12_RAYTRACING_PIPELINE_FLAGS = Enum('D3D12_RAYTRACING_PIPELINE_FLAGS', [
    'D3D12_RAYTRACING_PIPELINE_FLAG_NONE',
    'D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES',
    'D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES',
])

D3D12_RAYTRACING_PIPELINE_CONFIG1 = Struct('D3D12_RAYTRACING_PIPELINE_CONFIG1', [
    (UINT, 'MaxTraceRecursionDepth'),
    (D3D12_RAYTRACING_PIPELINE_FLAGS, 'Flags'),
])

D3D12_STATE_OBJECT_TYPE = Enum('D3D12_STATE_OBJECT_TYPE', [
    'D3D12_STATE_OBJECT_TYPE_COLLECTION',
    'D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE',
])

D3D12_STATE_OBJECT_DESC = Struct('D3D12_STATE_OBJECT_DESC', [
    (D3D12_STATE_OBJECT_TYPE, 'Type'),
    (UINT, 'NumSubobjects'),
    (Array(Const(D3D12_STATE_SUBOBJECT), '{self}.NumSubobjects'), 'pSubobjects'),
])

D3D12_RAYTRACING_GEOMETRY_FLAGS = EnumFlags('D3D12_RAYTRACING_GEOMETRY_FLAGS', [
    'D3D12_RAYTRACING_GEOMETRY_FLAG_NONE',
    'D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE',
    'D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION',
])

D3D12_RAYTRACING_GEOMETRY_TYPE = Enum('D3D12_RAYTRACING_GEOMETRY_TYPE', [
    'D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES',
    'D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS',
])

D3D12_RAYTRACING_INSTANCE_FLAGS = EnumFlags('D3D12_RAYTRACING_INSTANCE_FLAGS', [
    'D3D12_RAYTRACING_INSTANCE_FLAG_NONE',
    'D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE',
    'D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE',
    'D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE',
    'D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE',
])

D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE = Struct('D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'StartAddress'),
    (UINT64, 'StrideInBytes'),
])

D3D12_GPU_VIRTUAL_ADDRESS_RANGE = Struct('D3D12_GPU_VIRTUAL_ADDRESS_RANGE', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'StartAddress'),
    (UINT64, 'SizeInBytes'),
])

D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE = Struct('D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'StartAddress'),
    (UINT64, 'SizeInBytes'),
    (UINT64, 'StrideInBytes'),
])

D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC = Struct('D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'Transform3x4'),
    (DXGI_FORMAT, 'IndexFormat'),
    (DXGI_FORMAT, 'VertexFormat'),
    (UINT, 'IndexCount'),
    (UINT, 'VertexCount'),
    (D3D12_GPU_VIRTUAL_ADDRESS, 'IndexBuffer'),
    (D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE, 'VertexBuffer'),
])

D3D12_RAYTRACING_AABB = Struct('D3D12_RAYTRACING_AABB', [
    (FLOAT, 'MinX'),
    (FLOAT, 'MinY'),
    (FLOAT, 'MinZ'),
    (FLOAT, 'MaxX'),
    (FLOAT, 'MaxY'),
    (FLOAT, 'MaxZ'),
])

D3D12_RAYTRACING_GEOMETRY_AABBS_DESC = Struct('D3D12_RAYTRACING_GEOMETRY_AABBS_DESC', [
    (UINT64, 'AABBCount'),
    (D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE, 'AABBs'),
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS = EnumFlags('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS', [
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE',
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE = Enum('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE', [
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE',
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE = Enum('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE', [
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL',
])

D3D12_ELEMENTS_LAYOUT = Enum('D3D12_ELEMENTS_LAYOUT', [
    'D3D12_ELEMENTS_LAYOUT_ARRAY',
    'D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS',
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE = Enum('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE', [
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION',
    'D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE',
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC = Struct('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'DestBuffer'),
    (D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE, 'InfoType'),
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC = Struct('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC', [
    (UINT64, 'CompactedSizeInBytes'),
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC = Struct('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC', [
    (UINT64, 'DecodedSizeInBytes'),
])

D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER = Struct('D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER', [
    (D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE, 'Type'),
    (UINT, 'NumDescs'),
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC = Struct('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC', [
    (UINT64, 'SerializedSizeInBytes'),
    (UINT64, 'NumBottomLevelAccelerationStructurePointers'),
])

D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER = Struct('D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER', [
    (GUID, 'DriverOpaqueGUID'),
    (Array(BYTE, 16), 'DriverOpaqueVersioningData'),
])

D3D12_SERIALIZED_DATA_TYPE = Enum('D3D12_SERIALIZED_DATA_TYPE', [
    'D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE',
])

D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS = Enum('D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS', [
    'D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE',
    'D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE',
    'D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED',
    'D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION',
    'D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE',
])

D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER = Struct('D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER', [
    (D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER, 'DriverMatchingIdentifier'),
    (UINT64, 'SerializedSizeInBytesIncludingHeader'),
    (UINT64, 'DeserializedSizeInBytes'),
    (UINT64, 'NumBottomLevelAccelerationStructurePointersAfterHeader'),
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC = Struct('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC', [
    (UINT64, 'CurrentSizeInBytes'),
])

D3D12_RAYTRACING_INSTANCE_DESC = Struct('D3D12_RAYTRACING_INSTANCE_DESC', [
    (Array(Array(FLOAT, 4), 3), 'Transform'),
    (UINT, 'InstanceID'),
    (UINT, 'InstanceMask'),
    (UINT, 'InstanceContributionToHitGroupIndex'),
    (UINT, 'Flags'),
    (D3D12_GPU_VIRTUAL_ADDRESS, 'AccelerationStructure'),
])

D3D12_RAYTRACING_GEOMETRY_DESC = Struct('D3D12_RAYTRACING_GEOMETRY_DESC', [
    (D3D12_RAYTRACING_GEOMETRY_TYPE, 'Type'),
    (D3D12_RAYTRACING_GEOMETRY_FLAGS, 'Flags'),
    (Union('{self}.Type', [
        ('D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES', D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC, 'Triangles'),
        ('D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS', D3D12_RAYTRACING_GEOMETRY_AABBS_DESC, 'AABBs'),
    ]), None),
])

D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS = Struct('D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS', [
    (D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE, 'Type'),
    (D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS, 'Flags'),
    (UINT, 'NumDescs'),
    (D3D12_ELEMENTS_LAYOUT, 'DescsLayout'),
    (Union('{self}.Type', [
        ('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL', D3D12_GPU_VIRTUAL_ADDRESS, 'InstanceDescs'),
        ('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL', Union('{self}.DescsLayout', [
            ('D3D12_ELEMENTS_LAYOUT_ARRAY', Array(Const(D3D12_RAYTRACING_GEOMETRY_DESC), '{self}.NumDescs'), 'pGeometryDescs'),
            ('D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS', Array(Const(Pointer(Const(D3D12_RAYTRACING_GEOMETRY_DESC))), '{self}.NumDescs'), 'ppGeometryDescs'),
        ]), None),
    ]), None),
])

D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC = Struct('D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'DestAccelerationStructureData'),
    (D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS, 'Inputs'),
    (D3D12_GPU_VIRTUAL_ADDRESS, 'SourceAccelerationStructureData'),
    (D3D12_GPU_VIRTUAL_ADDRESS, 'ScratchAccelerationStructureData'),
])

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO = Struct('D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO', [
    (UINT64, 'ResultDataMaxSizeInBytes'),
    (UINT64, 'ScratchDataSizeInBytes'),
    (UINT64, 'UpdateScratchDataSizeInBytes'),
])

D3D12_RAY_FLAGS = EnumFlags('D3D12_RAY_FLAGS', [
    'D3D12_RAY_FLAG_NONE',
    'D3D12_RAY_FLAG_FORCE_OPAQUE',
    'D3D12_RAY_FLAG_FORCE_NON_OPAQUE',
    'D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH',
    'D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER',
    'D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES',
    'D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES',
    'D3D12_RAY_FLAG_CULL_OPAQUE',
    'D3D12_RAY_FLAG_CULL_NON_OPAQUE',
    'D3D12_RAY_FLAG_SKIP_TRIANGLES',
    'D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES',
])

D3D12_HIT_KIND = Enum('D3D12_HIT_KIND', [
    'D3D12_HIT_KIND_TRIANGLE_FRONT_FACE',
    'D3D12_HIT_KIND_TRIANGLE_BACK_FACE',
])

D3D12_AUTO_BREADCRUMB_OP = Enum('D3D12_AUTO_BREADCRUMB_OP', [
    'D3D12_AUTO_BREADCRUMB_OP_SETMARKER',
    'D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT',
    'D3D12_AUTO_BREADCRUMB_OP_ENDEVENT',
    'D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED',
    'D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED',
    'D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT',
    'D3D12_AUTO_BREADCRUMB_OP_DISPATCH',
    'D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION',
    'D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION',
    'D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE',
    'D3D12_AUTO_BREADCRUMB_OP_COPYTILES',
    'D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE',
    'D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW',
    'D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW',
    'D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW',
    'D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER',
    'D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE',
    'D3D12_AUTO_BREADCRUMB_OP_PRESENT',
    'D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA',
    'D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION',
    'D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION',
    'D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME',
    'D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES',
    'D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT',
    'D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64',
    'D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION',
    'D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE',
    'D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1',
    'D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION',
    'D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2',
    'D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1',
    'D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE',
    'D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO',
    'D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE',
    'D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS',
    'D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND',
    'D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND',
    'D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION',
    'D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP',
    'D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1',
    'D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND',
    'D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND',
    'D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH',
])

D3D12_AUTO_BREADCRUMB_NODE = Struct('D3D12_AUTO_BREADCRUMB_NODE', [
    (Pointer(Const(Char)), 'pCommandListDebugNameA'),
    (Pointer(Const(WChar)), 'pCommandListDebugNameW'),
    (Pointer(Const(Char)), 'pCommandQueueDebugNameA'),
    (Pointer(Const(WChar)), 'pCommandQueueDebugNameW'),
    (ObjPointer(ID3D12GraphicsCommandList), 'pCommandList'),
    (ObjPointer(ID3D12CommandQueue), 'pCommandQueue'),
    (UINT32, 'BreadcrumbCount'),
    (Pointer(Const(UINT32)), 'pLastBreadcrumbValue'),
    (Array(Const(D3D12_AUTO_BREADCRUMB_OP), '{self}.BreadcrumbCount'), 'pCommandHistory'),
])
D3D12_AUTO_BREADCRUMB_NODE.members.extend([
    (OpaquePointer(Const(D3D12_AUTO_BREADCRUMB_NODE)), 'pNext')
])

D3D12_DRED_BREADCRUMB_CONTEXT = Struct('D3D12_DRED_BREADCRUMB_CONTEXT', [
    (UINT, 'BreadcrumbIndex'),
    (Pointer(Const(WChar)), 'pContextString'),
])

D3D12_AUTO_BREADCRUMB_NODE1 = Struct('D3D12_AUTO_BREADCRUMB_NODE1', [
    (Pointer(Const(Char)), 'pCommandListDebugNameA'),
    (Pointer(Const(WChar)), 'pCommandListDebugNameW'),
    (Pointer(Const(Char)), 'pCommandQueueDebugNameA'),
    (Pointer(Const(WChar)), 'pCommandQueueDebugNameW'),
    (ObjPointer(ID3D12GraphicsCommandList), 'pCommandList'),
    (ObjPointer(ID3D12CommandQueue), 'pCommandQueue'),
    (UINT, 'BreadcrumbCount'),
    (Pointer(Const(UINT)), 'pLastBreadcrumbValue'),
    (Array(Const(D3D12_AUTO_BREADCRUMB_OP), '{self}.BreadcrumbCount'), 'pCommandHistory'),
])
D3D12_AUTO_BREADCRUMB_NODE1.members.extend([
    (OpaquePointer(Const(D3D12_AUTO_BREADCRUMB_NODE1)), 'pNext'),
    (UINT, 'BreadcrumbContextsCount'),
    (Array(D3D12_DRED_BREADCRUMB_CONTEXT, '{self}.BreadcrumbContextsCount'), 'pBreadcrumbContexts'),
])

D3D12_DRED_VERSION = Enum('D3D12_DRED_VERSION', [
    'D3D12_DRED_VERSION_1_0',
    'D3D12_DRED_VERSION_1_1',
    'D3D12_DRED_VERSION_1_2',
])

D3D12_DRED_FLAGS = Enum('D3D12_DRED_FLAGS', [
    'D3D12_DRED_FLAG_NONE',
    'D3D12_DRED_FLAG_FORCE_ENABLE',
    'D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS',
])

D3D12_DRED_ENABLEMENT = Enum('D3D12_DRED_ENABLEMENT', [
    'D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED',
    'D3D12_DRED_ENABLEMENT_FORCED_OFF',
    'D3D12_DRED_ENABLEMENT_FORCED_ON',
])

D3D12_DEVICE_REMOVED_EXTENDED_DATA = Struct('D3D12_DEVICE_REMOVED_EXTENDED_DATA', [
    (D3D12_DRED_FLAGS, 'Flags'),
    (Pointer(D3D12_AUTO_BREADCRUMB_NODE), 'pHeadAutoBreadcrumbNode'),
])

D3D12_DRED_ALLOCATION_TYPE = Enum('D3D12_DRED_ALLOCATION_TYPE', [
    'D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE',
    'D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR',
    'D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE',
    'D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST',
    'D3D12_DRED_ALLOCATION_TYPE_FENCE',
    'D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP',
    'D3D12_DRED_ALLOCATION_TYPE_HEAP',
    'D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP',
    'D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE',
    'D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY',
    'D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER',
    'D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR',
    'D3D12_DRED_ALLOCATION_TYPE_RESOURCE',
    'D3D12_DRED_ALLOCATION_TYPE_PASS',
    'D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION',
    'D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY',
    'D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION',
    'D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP',
    'D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL',
    'D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER',
    'D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT',
    'D3D12_DRED_ALLOCATION_TYPE_METACOMMAND',
    'D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP',
    'D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR',
    'D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP',
    'D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND',
    'D3D12_DRED_ALLOCATION_TYPE_INVALID',
])

D3D12_DRED_ALLOCATION_NODE = Struct('D3D12_DRED_ALLOCATION_NODE', [
    (Pointer(Const(Char)), 'ObjectNameA'),
    (Pointer(Const(WChar)), 'ObjectNameW'),
    (D3D12_DRED_ALLOCATION_TYPE, 'AllocationType'),
])
D3D12_DRED_ALLOCATION_NODE.members.extend([
    (OpaquePointer(Const(D3D12_DRED_ALLOCATION_NODE)), 'pNext')
])

D3D12_DRED_ALLOCATION_NODE1 = Struct('D3D12_DRED_ALLOCATION_NODE1', [
    (Pointer(Const(Char)), 'ObjectNameA'),
    (Pointer(Const(WChar)), 'ObjectNameW'),
    (D3D12_DRED_ALLOCATION_TYPE, 'AllocationType'),
])
D3D12_DRED_ALLOCATION_NODE1.members.extend([
    (OpaquePointer(Const(D3D12_DRED_ALLOCATION_NODE1)), 'pNext'),
    (ObjPointer(Const(IUnknown)), 'pObject'),
])

D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT = Struct('D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT', [
    (OpaquePointer(Const(D3D12_AUTO_BREADCRUMB_NODE)), 'pHeadAutoBreadcrumbNode'),
])

D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 = Struct('D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1', [
    (OpaquePointer(Const(D3D12_AUTO_BREADCRUMB_NODE1)), 'pHeadAutoBreadcrumbNode'),
])

D3D12_DRED_PAGE_FAULT_OUTPUT = Struct('D3D12_DRED_PAGE_FAULT_OUTPUT', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'PageFaultVA'),
    (OpaquePointer(Const(D3D12_DRED_ALLOCATION_NODE)), 'pHeadExistingAllocationNode'),
    (OpaquePointer(Const(D3D12_DRED_ALLOCATION_NODE)), 'pHeadRecentFreedAllocationNode'),
])

D3D12_DRED_PAGE_FAULT_OUTPUT1 = Struct('D3D12_DRED_PAGE_FAULT_OUTPUT1', [
    (D3D12_GPU_VIRTUAL_ADDRESS, 'PageFaultVA'),
    (OpaquePointer(Const(D3D12_DRED_ALLOCATION_NODE1)), 'pHeadExistingAllocationNode'),
    (OpaquePointer(Const(D3D12_DRED_ALLOCATION_NODE1)), 'pHeadRecentFreedAllocationNode'),
])

D3D12_DEVICE_REMOVED_EXTENDED_DATA1 = Struct('D3D12_DEVICE_REMOVED_EXTENDED_DATA1', [
    (HRESULT, 'DeviceRemovedReason'),
    (D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT, 'AutoBreadcrumbsOutput'),
    (D3D12_DRED_PAGE_FAULT_OUTPUT, 'PageFaultOutput'),
])

D3D12_DEVICE_REMOVED_EXTENDED_DATA2 = Struct('D3D12_DEVICE_REMOVED_EXTENDED_DATA2', [
    (HRESULT, 'DeviceRemovedReason'),
    (D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1, 'AutoBreadcrumbsOutput'),
    (D3D12_DRED_PAGE_FAULT_OUTPUT1, 'PageFaultOutput'),
])

D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA = Struct('D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA', [
    (D3D12_DRED_VERSION, 'Version'),
    (Union("{self}.Version", [
        ('D3D12_DRED_VERSION_1_0', D3D12_DEVICE_REMOVED_EXTENDED_DATA, 'Dred_1_0'),
        ('D3D12_DRED_VERSION_1_1', D3D12_DEVICE_REMOVED_EXTENDED_DATA1, 'Dred_1_1'),
        ('D3D12_DRED_VERSION_1_2', D3D12_DEVICE_REMOVED_EXTENDED_DATA2, 'Dred_1_2'),
    ]), None),
])

D3D12_BACKGROUND_PROCESSING_MODE = Enum('D3D12_BACKGROUND_PROCESSING_MODE', [
    'D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED',
    'D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS',
    'D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK',
    'D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM',
])

D3D12_MEASUREMENTS_ACTION = Enum('D3D12_MEASUREMENTS_ACTION', [
    'D3D12_MEASUREMENTS_ACTION_KEEP_ALL',
    'D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS',
    'D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY',
    'D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS',
])

D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = Struct('D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT', [
    (UINT, 'NodeIndex'),
    (UINT, 'Count'),
])

D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES = Struct('D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES', [
    (UINT, 'NodeIndex'),
    (UINT, 'Count'),
    (Pointer(GUID), 'pTypes'),
])

D3D12_PROTECTED_RESOURCE_SESSION_DESC1 = Struct('D3D12_PROTECTED_RESOURCE_SESSION_DESC1', [
    (UINT, 'NodeMask'),
    (D3D12_PROTECTED_RESOURCE_SESSION_FLAGS, 'Flags'),
    (GUID, 'ProtectionType'),
])

D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE = Enum('D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE', [
    'D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD',
    'D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE',
    'D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR',
    'D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS',
])

D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS = Struct('D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS', [
    (D3D12_CLEAR_VALUE, 'ClearValue'),
])

D3D12_RENDER_PASS_BEGINNING_ACCESS = Struct('D3D12_RENDER_PASS_BEGINNING_ACCESS', [
    (D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE, 'Type'),
    (Union("{self}.Type", [
        ('D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR', D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS, 'Clear'),
    ]), None),
])

D3D12_RENDER_PASS_ENDING_ACCESS_TYPE = Enum('D3D12_RENDER_PASS_ENDING_ACCESS_TYPE', [
    'D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD',
    'D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE',
    'D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE',
    'D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS',
])

D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS = Struct('D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS', [
    (UINT, 'SrcSubresource'),
    (UINT, 'DstSubresource'),
    (UINT, 'DstX'),
    (UINT, 'DstY'),
    (D3D12_RECT, 'SrcRect'),
])

D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS = Struct('D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS', [
    (ObjPointer(ID3D12Resource), 'pSrcResource'),
    (ObjPointer(ID3D12Resource), 'pDstResource'),
    (UINT, 'SubresourceCount'),
    (Array(Const(D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS), '{self}.SubresourceCount'), 'pSubresourceParameters'),
    (DXGI_FORMAT, 'Format'),
    (D3D12_RESOLVE_MODE, 'ResolveMode'),
    (BOOL, 'PreserveResolveSource'),
])

D3D12_RENDER_PASS_ENDING_ACCESS = Struct('D3D12_RENDER_PASS_ENDING_ACCESS', [
    (D3D12_RENDER_PASS_ENDING_ACCESS_TYPE, 'Type'),
    (Union("{self}.Type", [
        ('D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE', D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS, 'Resolve'),
    ]), None),
])

D3D12_RENDER_PASS_RENDER_TARGET_DESC = Struct('D3D12_RENDER_PASS_RENDER_TARGET_DESC', [
    (D3D12_CPU_DESCRIPTOR_HANDLE, 'cpuDescriptor'),
    (D3D12_RENDER_PASS_BEGINNING_ACCESS, 'BeginningAccess'),
    (D3D12_RENDER_PASS_ENDING_ACCESS, 'EndingAccess'),
])

D3D12_RENDER_PASS_DEPTH_STENCIL_DESC = Struct('D3D12_RENDER_PASS_DEPTH_STENCIL_DESC', [
    (D3D12_CPU_DESCRIPTOR_HANDLE, 'cpuDescriptor'),
    (D3D12_RENDER_PASS_BEGINNING_ACCESS, 'DepthBeginningAccess'),
    (D3D12_RENDER_PASS_BEGINNING_ACCESS, 'StencilBeginningAccess'),
    (D3D12_RENDER_PASS_ENDING_ACCESS, 'DepthEndingAccess'),
    (D3D12_RENDER_PASS_ENDING_ACCESS, 'StencilEndingAccess'),
])

D3D12_RENDER_PASS_FLAGS = EnumFlags('D3D12_RENDER_PASS_FLAGS', [
    'D3D12_RENDER_PASS_FLAG_NONE',
    'D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES',
    'D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS',
    'D3D12_RENDER_PASS_FLAG_RESUMING_PASS',
])

D3D12_DISPATCH_RAYS_DESC = Struct('D3D12_DISPATCH_RAYS_DESC', [
    (D3D12_GPU_VIRTUAL_ADDRESS_RANGE, 'RayGenerationShaderRecord'),
    (D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE, 'MissShaderTable'),
    (D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE, 'HitGroupTable'),
    (D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE, 'CallableShaderTable'),
    (UINT, 'Width'),
    (UINT, 'Height'),
    (UINT, 'Depth'),
])

D3D12_SUBRESOURCE_DATA = Struct('D3D12_SUBRESOURCE_DATA', [
    (Pointer(Const(Void)), 'pData'),
    (IntPtr, 'RowPitch'),
    (IntPtr, 'SlicePitch'),
])

D3D12_MEMCPY_DEST = Struct('D3D12_MEMCPY_DEST', [
    (Pointer(Void), 'pData'),
    (SIZE_T, 'RowPitch'),
    (SIZE_T, 'SlicePitch'),
])

PFN_D3D12_CREATE_DEVICE = Alias('PFN_D3D12_CREATE_DEVICE', Pointer(Opaque("HRESULT (*)( ::IUnknown *,::D3D_FEATURE_LEVEL,::IID const &,void * * )")))

PFN_D3D12_GET_DEBUG_INTERFACE = Alias('PFN_D3D12_GET_DEBUG_INTERFACE', Pointer(Opaque("HRESULT (*)( ::IID const &,void * * )")))

D3D12_AXIS_SHADING_RATE = Enum('D3D12_AXIS_SHADING_RATE', [
    'D3D12_AXIS_SHADING_RATE_1X',
    'D3D12_AXIS_SHADING_RATE_2X',
    'D3D12_AXIS_SHADING_RATE_4X',
])

D3D12_SHADING_RATE = Enum('D3D12_SHADING_RATE', [
    'D3D12_SHADING_RATE_1X1',
    'D3D12_SHADING_RATE_1X2',
    'D3D12_SHADING_RATE_2X1',
    'D3D12_SHADING_RATE_2X2',
    'D3D12_SHADING_RATE_2X4',
    'D3D12_SHADING_RATE_4X2',
    'D3D12_SHADING_RATE_4X4',
])

D3D12_SHADING_RATE_COMBINER = Enum('D3D12_SHADING_RATE_COMBINER', [
    'D3D12_SHADING_RATE_COMBINER_PASSTHROUGH',
    'D3D12_SHADING_RATE_COMBINER_OVERRIDE',
    'D3D12_SHADING_RATE_COMBINER_MIN',
    'D3D12_SHADING_RATE_COMBINER_MAX',
    'D3D12_SHADING_RATE_COMBINER_SUM',
])

D3D12_DISPATCH_MESH_ARGUMENTS = Struct('D3D12_DISPATCH_MESH_ARGUMENTS', [
    (UINT, 'ThreadGroupCountX'),
    (UINT, 'ThreadGroupCountY'),
    (UINT, 'ThreadGroupCountZ'),
])

ID3D12Object.methods += [
    StdMethod(HRESULT, 'GetPrivateData', [(REFGUID, 'guid'), InOut(Pointer(UINT), 'pDataSize'), Out(OpaquePointer(Void), 'pData')], sideeffects=False),
    StdMethod(HRESULT, 'SetPrivateData', [(REFGUID, 'guid'), (UINT, 'DataSize'), (OpaqueBlob(Const(Void), 'DataSize'), 'pData')]),
    StdMethod(HRESULT, 'SetPrivateDataInterface', [(REFGUID, 'guid'), (OpaquePointer(Const(IUnknown)), 'pData')], sideeffects=False),
    StdMethod(HRESULT, 'SetName', [(LPCWSTR, 'Name')]),
]

ID3D12DeviceChild.methods += [
    StdMethod(HRESULT, 'GetDevice', [(REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvDevice')]),
]

ID3D12RootSignature.methods += [
]

ID3D12RootSignatureDeserializer.methods += [
    StdMethod(Pointer(Const(D3D12_ROOT_SIGNATURE_DESC)), 'GetRootSignatureDesc', [], sideeffects=False),
]

ID3D12VersionedRootSignatureDeserializer.methods += [
    StdMethod(HRESULT, 'GetRootSignatureDescAtVersion', [(D3D_ROOT_SIGNATURE_VERSION, 'convertToVersion'), Out(Pointer(Pointer(Const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC))), 'ppDesc')], sideeffects=False),
    StdMethod(Pointer(Const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC)), 'GetUnconvertedRootSignatureDesc', [], sideeffects=False),
]

ID3D12Pageable.methods += [
]

ID3D12Heap.methods += [
    StdMethod(D3D12_HEAP_DESC, 'GetDesc', [], sideeffects=False),
]

ID3D12Resource.methods += [
    StdMethod(HRESULT, 'Map', [(UINT, 'Subresource'), (Pointer(Const(D3D12_RANGE)), 'pReadRange'), Out(Pointer(LinearPointer(Void, '_MappedSize')), 'ppData')]),
    StdMethod(Void, 'Unmap', [(UINT, 'Subresource'), (Pointer(Const(D3D12_RANGE)), 'pWrittenRange')]),
    StdMethod(D3D12_RESOURCE_DESC, 'GetDesc', [], sideeffects=False),
    StdMethod(D3D12_GPU_VIRTUAL_ADDRESS, 'GetGPUVirtualAddress', [], sideeffects=False),
    StdMethod(HRESULT, 'WriteToSubresource', [(UINT, 'DstSubresource'), (Pointer(Const(D3D12_BOX)), 'pDstBox'), (Blob(Const(Void), '_calcSubresourceSize12(_this, DstSubresource, pDstBox, SrcRowPitch, SrcDepthPitch)'), 'pSrcData'), (UINT, 'SrcRowPitch'), (UINT, 'SrcDepthPitch')]),
    StdMethod(HRESULT, 'ReadFromSubresource', [Out(OpaquePointer(Void), 'pDstData'), (UINT, 'DstRowPitch'), (UINT, 'DstDepthPitch'), (UINT, 'SrcSubresource'), (Pointer(Const(D3D12_BOX)), 'pSrcBox')], sideeffects=False),
    StdMethod(HRESULT, 'GetHeapProperties', [Out(Pointer(D3D12_HEAP_PROPERTIES), 'pHeapProperties'), Out(Pointer(D3D12_HEAP_FLAGS), 'pHeapFlags')]),
]

ID3D12CommandAllocator.methods += [
    StdMethod(HRESULT, 'Reset', []),
]

ID3D12Fence.methods += [
    StdMethod(UINT64, 'GetCompletedValue', []),
    StdMethod(HRESULT, 'SetEventOnCompletion', [(UINT64, 'Value'), (HANDLE, 'hEvent')]),
    StdMethod(HRESULT, 'Signal', [(UINT64, 'Value')]),
]

ID3D12Fence1.methods += [
    StdMethod(D3D12_FENCE_FLAGS, 'GetCreationFlags', [], sideeffects=False),
]

ID3D12PipelineState.methods += [
    StdMethod(HRESULT, 'GetCachedBlob', [Out(Pointer(ObjPointer(ID3DBlob)), 'ppBlob')]),
]

ID3D12DescriptorHeap.methods += [
    StdMethod(D3D12_DESCRIPTOR_HEAP_DESC, 'GetDesc', [], sideeffects=False),
    StdMethod(D3D12_CPU_DESCRIPTOR_HANDLE, 'GetCPUDescriptorHandleForHeapStart', [], sideeffects=False),
    StdMethod(D3D12_GPU_DESCRIPTOR_HANDLE, 'GetGPUDescriptorHandleForHeapStart', [], sideeffects=False),
]

ID3D12QueryHeap.methods += [
]

ID3D12CommandSignature.methods += [
]

ID3D12CommandList.methods += [
    StdMethod(D3D12_COMMAND_LIST_TYPE, 'GetType', [], sideeffects=False),
]

ID3D12GraphicsCommandList.methods += [
    StdMethod(HRESULT, 'Close', []),
    StdMethod(HRESULT, 'Reset', [(ObjPointer(ID3D12CommandAllocator), 'pAllocator'), (ObjPointer(ID3D12PipelineState), 'pInitialState')]),
    StdMethod(Void, 'ClearState', [(ObjPointer(ID3D12PipelineState), 'pPipelineState')]),
    StdMethod(Void, 'DrawInstanced', [(UINT, 'VertexCountPerInstance'), (UINT, 'InstanceCount'), (UINT, 'StartVertexLocation'), (UINT, 'StartInstanceLocation')]),
    StdMethod(Void, 'DrawIndexedInstanced', [(UINT, 'IndexCountPerInstance'), (UINT, 'InstanceCount'), (UINT, 'StartIndexLocation'), (INT, 'BaseVertexLocation'), (UINT, 'StartInstanceLocation')]),
    StdMethod(Void, 'Dispatch', [(UINT, 'ThreadGroupCountX'), (UINT, 'ThreadGroupCountY'), (UINT, 'ThreadGroupCountZ')]),
    StdMethod(Void, 'CopyBufferRegion', [(ObjPointer(ID3D12Resource), 'pDstBuffer'), (UINT64, 'DstOffset'), (ObjPointer(ID3D12Resource), 'pSrcBuffer'), (UINT64, 'SrcOffset'), (UINT64, 'NumBytes')]),
    StdMethod(Void, 'CopyTextureRegion', [(Pointer(Const(D3D12_TEXTURE_COPY_LOCATION)), 'pDst'), (UINT, 'DstX'), (UINT, 'DstY'), (UINT, 'DstZ'), (Pointer(Const(D3D12_TEXTURE_COPY_LOCATION)), 'pSrc'), (Pointer(Const(D3D12_BOX)), 'pSrcBox')]),
    StdMethod(Void, 'CopyResource', [(ObjPointer(ID3D12Resource), 'pDstResource'), (ObjPointer(ID3D12Resource), 'pSrcResource')]),
    StdMethod(Void, 'CopyTiles', [(ObjPointer(ID3D12Resource), 'pTiledResource'), (Pointer(Const(D3D12_TILED_RESOURCE_COORDINATE)), 'pTileRegionStartCoordinate'), (Pointer(Const(D3D12_TILE_REGION_SIZE)), 'pTileRegionSize'), (ObjPointer(ID3D12Resource), 'pBuffer'), (UINT64, 'BufferStartOffsetInBytes'), (D3D12_TILE_COPY_FLAGS, 'Flags')]),
    StdMethod(Void, 'ResolveSubresource', [(ObjPointer(ID3D12Resource), 'pDstResource'), (UINT, 'DstSubresource'), (ObjPointer(ID3D12Resource), 'pSrcResource'), (UINT, 'SrcSubresource'), (DXGI_FORMAT, 'Format')]),
    StdMethod(Void, 'IASetPrimitiveTopology', [(D3D12_PRIMITIVE_TOPOLOGY, 'PrimitiveTopology')]),
    StdMethod(Void, 'RSSetViewports', [(UINT, 'NumViewports'), (Array(Const(D3D12_VIEWPORT), 'NumViewports'), 'pViewports')]),
    StdMethod(Void, 'RSSetScissorRects', [(UINT, 'NumRects'), (Array(Const(D3D12_RECT), 'NumRects'), 'pRects')]),
    StdMethod(Void, 'OMSetBlendFactor', [(Pointer(Const(FLOAT)), 'BlendFactor')]),
    StdMethod(Void, 'OMSetStencilRef', [(UINT, 'StencilRef')]),
    StdMethod(Void, 'SetPipelineState', [(ObjPointer(ID3D12PipelineState), 'pPipelineState')]),
    StdMethod(Void, 'ResourceBarrier', [(UINT, 'NumBarriers'), (Array(Const(D3D12_RESOURCE_BARRIER), 'NumBarriers'), 'pBarriers')]),
    StdMethod(Void, 'ExecuteBundle', [(ObjPointer(ID3D12GraphicsCommandList), 'pCommandList')]),
    StdMethod(Void, 'SetDescriptorHeaps', [(UINT, 'NumDescriptorHeaps'), (Array(Const(ObjPointer(ID3D12DescriptorHeap)), 'NumDescriptorHeaps'), 'ppDescriptorHeaps')]),
    StdMethod(Void, 'SetComputeRootSignature', [(ObjPointer(ID3D12RootSignature), 'pRootSignature')]),
    StdMethod(Void, 'SetGraphicsRootSignature', [(ObjPointer(ID3D12RootSignature), 'pRootSignature')]),
    StdMethod(Void, 'SetComputeRootDescriptorTable', [(UINT, 'RootParameterIndex'), (D3D12_GPU_DESCRIPTOR_HANDLE, 'BaseDescriptor')]),
    StdMethod(Void, 'SetGraphicsRootDescriptorTable', [(UINT, 'RootParameterIndex'), (D3D12_GPU_DESCRIPTOR_HANDLE, 'BaseDescriptor')]),
    StdMethod(Void, 'SetComputeRoot32BitConstant', [(UINT, 'RootParameterIndex'), (UINT, 'SrcData'), (UINT, 'DestOffsetIn32BitValues')]),
    StdMethod(Void, 'SetGraphicsRoot32BitConstant', [(UINT, 'RootParameterIndex'), (UINT, 'SrcData'), (UINT, 'DestOffsetIn32BitValues')]),
    StdMethod(Void, 'SetComputeRoot32BitConstants', [(UINT, 'RootParameterIndex'), (UINT, 'Num32BitValuesToSet'), (Blob(Const(Void), '4*Num32BitValuesToSet'), 'pSrcData'), (UINT, 'DestOffsetIn32BitValues')]),
    StdMethod(Void, 'SetGraphicsRoot32BitConstants', [(UINT, 'RootParameterIndex'), (UINT, 'Num32BitValuesToSet'), (Blob(Const(Void), '4*Num32BitValuesToSet'), 'pSrcData'), (UINT, 'DestOffsetIn32BitValues')]),
    StdMethod(Void, 'SetComputeRootConstantBufferView', [(UINT, 'RootParameterIndex'), (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation')]),
    StdMethod(Void, 'SetGraphicsRootConstantBufferView', [(UINT, 'RootParameterIndex'), (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation')]),
    StdMethod(Void, 'SetComputeRootShaderResourceView', [(UINT, 'RootParameterIndex'), (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation')]),
    StdMethod(Void, 'SetGraphicsRootShaderResourceView', [(UINT, 'RootParameterIndex'), (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation')]),
    StdMethod(Void, 'SetComputeRootUnorderedAccessView', [(UINT, 'RootParameterIndex'), (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation')]),
    StdMethod(Void, 'SetGraphicsRootUnorderedAccessView', [(UINT, 'RootParameterIndex'), (D3D12_GPU_VIRTUAL_ADDRESS, 'BufferLocation')]),
    StdMethod(Void, 'IASetIndexBuffer', [(Pointer(Const(D3D12_INDEX_BUFFER_VIEW)), 'pView')]),
    StdMethod(Void, 'IASetVertexBuffers', [(UINT, 'StartSlot'), (UINT, 'NumViews'), (Array(Const(D3D12_VERTEX_BUFFER_VIEW), 'NumViews'), 'pViews')]),
    StdMethod(Void, 'SOSetTargets', [(UINT, 'StartSlot'), (UINT, 'NumViews'), (Array(Const(D3D12_STREAM_OUTPUT_BUFFER_VIEW), 'NumViews'), 'pViews')]),
    StdMethod(Void, 'OMSetRenderTargets', [(UINT, 'NumRenderTargetDescriptors'), (Array(Const(D3D12_CPU_DESCRIPTOR_HANDLE), 'NumRenderTargetDescriptors'), 'pRenderTargetDescriptors'), (BOOL, 'RTsSingleHandleToDescriptorRange'), (Pointer(Const(D3D12_CPU_DESCRIPTOR_HANDLE)), 'pDepthStencilDescriptor')]),
    StdMethod(Void, 'ClearDepthStencilView', [(D3D12_CPU_DESCRIPTOR_HANDLE, 'DepthStencilView'), (D3D12_CLEAR_FLAGS, 'ClearFlags'), (FLOAT, 'Depth'), (UINT8, 'Stencil'), (UINT, 'NumRects'), (Array(Const(D3D12_RECT), 'NumRects'), 'pRects')]),
    StdMethod(Void, 'ClearRenderTargetView', [(D3D12_CPU_DESCRIPTOR_HANDLE, 'RenderTargetView'), (Array(Const(FLOAT), 4), 'ColorRGBA'), (UINT, 'NumRects'), (Array(Const(D3D12_RECT), 'NumRects'), 'pRects')]),
    StdMethod(Void, 'ClearUnorderedAccessViewUint', [(D3D12_GPU_DESCRIPTOR_HANDLE, 'ViewGPUHandleInCurrentHeap'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'ViewCPUHandle'), (ObjPointer(ID3D12Resource), 'pResource'), (Array(Const(UINT), 4), 'Values'), (UINT, 'NumRects'), (Array(Const(D3D12_RECT), 'NumRects'), 'pRects')]),
    StdMethod(Void, 'ClearUnorderedAccessViewFloat', [(D3D12_GPU_DESCRIPTOR_HANDLE, 'ViewGPUHandleInCurrentHeap'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'ViewCPUHandle'), (ObjPointer(ID3D12Resource), 'pResource'), (Array(Const(FLOAT), 4), 'Values'), (UINT, 'NumRects'), (Array(Const(D3D12_RECT), 'NumRects'), 'pRects')]),
    StdMethod(Void, 'DiscardResource', [(ObjPointer(ID3D12Resource), 'pResource'), (Pointer(Const(D3D12_DISCARD_REGION)), 'pRegion')]),
    StdMethod(Void, 'BeginQuery', [(ObjPointer(ID3D12QueryHeap), 'pQueryHeap'), (D3D12_QUERY_TYPE, 'Type'), (UINT, 'Index')]),
    StdMethod(Void, 'EndQuery', [(ObjPointer(ID3D12QueryHeap), 'pQueryHeap'), (D3D12_QUERY_TYPE, 'Type'), (UINT, 'Index')]),
    StdMethod(Void, 'ResolveQueryData', [(ObjPointer(ID3D12QueryHeap), 'pQueryHeap'), (D3D12_QUERY_TYPE, 'Type'), (UINT, 'StartIndex'), (UINT, 'NumQueries'), (ObjPointer(ID3D12Resource), 'pDestinationBuffer'), (UINT64, 'AlignedDestinationBufferOffset')]),
    StdMethod(Void, 'SetPredication', [(ObjPointer(ID3D12Resource), 'pBuffer'), (UINT64, 'AlignedBufferOffset'), (D3D12_PREDICATION_OP, 'Operation')]),
    StdMethod(Void, 'SetMarker', [(UINT, 'Metadata'), (Blob(Const(Void), 'Size'), 'pData'), (UINT, 'Size')]),
    StdMethod(Void, 'BeginEvent', [(UINT, 'Metadata'), (Blob(Const(Void), 'Size'), 'pData'), (UINT, 'Size')]),
    StdMethod(Void, 'EndEvent', []),
    StdMethod(Void, 'ExecuteIndirect', [(ObjPointer(ID3D12CommandSignature), 'pCommandSignature'), (UINT, 'MaxCommandCount'), (ObjPointer(ID3D12Resource), 'pArgumentBuffer'), (UINT64, 'ArgumentBufferOffset'), (ObjPointer(ID3D12Resource), 'pCountBuffer'), (UINT64, 'CountBufferOffset')]),
]

ID3D12GraphicsCommandList1.methods += [
    StdMethod(Void, 'AtomicCopyBufferUINT', [(ObjPointer(ID3D12Resource), 'pDstBuffer'), (UINT64, 'DstOffset'), (ObjPointer(ID3D12Resource), 'pSrcBuffer'), (UINT64, 'SrcOffset'), (UINT, 'Dependencies'), (Array(Const(ObjPointer(ID3D12Resource)), 'Dependencies'), 'ppDependentResources'), (Array(Const(D3D12_SUBRESOURCE_RANGE_UINT64), 'Dependencies'), 'pDependentSubresourceRanges')]),
    StdMethod(Void, 'AtomicCopyBufferUINT64', [(ObjPointer(ID3D12Resource), 'pDstBuffer'), (UINT64, 'DstOffset'), (ObjPointer(ID3D12Resource), 'pSrcBuffer'), (UINT64, 'SrcOffset'), (UINT, 'Dependencies'), (Array(Const(ObjPointer(ID3D12Resource)), 'Dependencies'), 'ppDependentResources'), (Array(Const(D3D12_SUBRESOURCE_RANGE_UINT64), 'Dependencies'), 'pDependentSubresourceRanges')]),
    StdMethod(Void, 'OMSetDepthBounds', [(FLOAT, 'Min'), (FLOAT, 'Max')]),
    StdMethod(Void, 'SetSamplePositions', [(UINT, 'NumSamplesPerPixel'), (UINT, 'NumPixels'), (Array(D3D12_SAMPLE_POSITION, 'NumSamplesPerPixel*NumPixels'), 'pSamplePositions')]),
    StdMethod(Void, 'ResolveSubresourceRegion', [(ObjPointer(ID3D12Resource), 'pDstResource'), (UINT, 'DstSubresource'), (UINT, 'DstX'), (UINT, 'DstY'), (ObjPointer(ID3D12Resource), 'pSrcResource'), (UINT, 'SrcSubresource'), (Pointer(D3D12_RECT), 'pSrcRect'), (DXGI_FORMAT, 'Format'), (D3D12_RESOLVE_MODE, 'ResolveMode')]),
    StdMethod(Void, 'SetViewInstanceMask', [(UINT, 'Mask')]),
]

ID3D12GraphicsCommandList2.methods += [
    StdMethod(Void, 'WriteBufferImmediate', [(UINT, 'Count'), (Array(Const(D3D12_WRITEBUFFERIMMEDIATE_PARAMETER), 'Count'), 'pParams'), (Array(Const(D3D12_WRITEBUFFERIMMEDIATE_MODE), 'Count'), 'pModes')]),
]

ID3D12CommandQueue.methods += [
    StdMethod(Void, 'UpdateTileMappings', [(ObjPointer(ID3D12Resource), 'pResource'), (UINT, 'NumResourceRegions'), (Array(Const(D3D12_TILED_RESOURCE_COORDINATE), 'NumResourceRegions'), 'pResourceRegionStartCoordinates'), (Array(Const(D3D12_TILE_REGION_SIZE), 'NumResourceRegions'), 'pResourceRegionSizes'), (ObjPointer(ID3D12Heap), 'pHeap'), (UINT, 'NumRanges'), (Array(Const(D3D12_TILE_RANGE_FLAGS), 'NumRanges'), 'pRangeFlags'), (Array(Const(UINT), 'NumRanges'), 'pHeapRangeStartOffsets'), (Array(Const(UINT), 'NumRanges'), 'pRangeTileCounts'), (D3D12_TILE_MAPPING_FLAGS, 'Flags')]),
    StdMethod(Void, 'CopyTileMappings', [(ObjPointer(ID3D12Resource), 'pDstResource'), (Pointer(Const(D3D12_TILED_RESOURCE_COORDINATE)), 'pDstRegionStartCoordinate'), (ObjPointer(ID3D12Resource), 'pSrcResource'), (Pointer(Const(D3D12_TILED_RESOURCE_COORDINATE)), 'pSrcRegionStartCoordinate'), (Pointer(Const(D3D12_TILE_REGION_SIZE)), 'pRegionSize'), (D3D12_TILE_MAPPING_FLAGS, 'Flags')]),
    StdMethod(Void, 'ExecuteCommandLists', [(UINT, 'NumCommandLists'), (Array(Const(ObjPointer(ID3D12CommandList)), 'NumCommandLists'), 'ppCommandLists')]),
    StdMethod(Void, 'SetMarker', [(UINT, 'Metadata'), (Blob(Const(Void), 'Size'), 'pData'), (UINT, 'Size')]),
    StdMethod(Void, 'BeginEvent', [(UINT, 'Metadata'), (Blob(Const(Void), 'Size'), 'pData'), (UINT, 'Size')]),
    StdMethod(Void, 'EndEvent', []),
    StdMethod(HRESULT, 'Signal', [(ObjPointer(ID3D12Fence), 'pFence'), (UINT64, 'Value')]),
    StdMethod(HRESULT, 'Wait', [(ObjPointer(ID3D12Fence), 'pFence'), (UINT64, 'Value')]),
    StdMethod(HRESULT, 'GetTimestampFrequency', [Out(Pointer(UINT64), 'pFrequency')]),
    StdMethod(HRESULT, 'GetClockCalibration', [Out(Pointer(UINT64), 'pGpuTimestamp'), Out(Pointer(UINT64), 'pCpuTimestamp')]),
    StdMethod(D3D12_COMMAND_QUEUE_DESC, 'GetDesc', [], sideeffects=False),
]

ID3D12Device.methods += [
    StdMethod(UINT, 'GetNodeCount', [], sideeffects=False),
    StdMethod(HRESULT, 'CreateCommandQueue', [(Pointer(Const(D3D12_COMMAND_QUEUE_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppCommandQueue')]),
    StdMethod(HRESULT, 'CreateCommandAllocator', [(D3D12_COMMAND_LIST_TYPE, 'type'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppCommandAllocator')]),
    StdMethod(HRESULT, 'CreateGraphicsPipelineState', [(Pointer(Const(D3D12_GRAPHICS_PIPELINE_STATE_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppPipelineState')]),
    StdMethod(HRESULT, 'CreateComputePipelineState', [(Pointer(Const(D3D12_COMPUTE_PIPELINE_STATE_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppPipelineState')]),
    StdMethod(HRESULT, 'CreateCommandList', [(UINT, 'nodeMask'), (D3D12_COMMAND_LIST_TYPE, 'type'), (ObjPointer(ID3D12CommandAllocator), 'pCommandAllocator'), (ObjPointer(ID3D12PipelineState), 'pInitialState'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppCommandList')]),
    StdMethod(HRESULT, 'CheckFeatureSupport', [(D3D12_FEATURE, 'Feature'), Out(Blob(Void, 'FeatureSupportDataSize'), 'pFeatureSupportData'), (UINT, 'FeatureSupportDataSize')], sideeffects=False),
    StdMethod(HRESULT, 'CreateDescriptorHeap', [(Pointer(Const(D3D12_DESCRIPTOR_HEAP_DESC)), 'pDescriptorHeapDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvHeap')], vars=[
        (UINT, 'FromIncrementSize'),
        (D3D12_CPU_DESCRIPTOR_HANDLE, 'CPUFrom'),
        (D3D12_GPU_DESCRIPTOR_HANDLE, 'GPUFrom')
    ]),
    StdMethod(UINT, 'GetDescriptorHandleIncrementSize', [(D3D12_DESCRIPTOR_HEAP_TYPE, 'DescriptorHeapType')], sideeffects=False),
    StdMethod(HRESULT, 'CreateRootSignature', [(UINT, 'nodeMask'), (Blob(Const(Void), 'blobLengthInBytes'), 'pBlobWithRootSignature'), (SIZE_T, 'blobLengthInBytes'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvRootSignature')]),
    StdMethod(Void, 'CreateConstantBufferView', [(Pointer(Const(D3D12_CONSTANT_BUFFER_VIEW_DESC)), 'pDesc'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'DestDescriptor')]),
    StdMethod(Void, 'CreateShaderResourceView', [(ObjPointer(ID3D12Resource), 'pResource'), (Pointer(Const(D3D12_SHADER_RESOURCE_VIEW_DESC)), 'pDesc'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'DestDescriptor')]),
    StdMethod(Void, 'CreateUnorderedAccessView', [(ObjPointer(ID3D12Resource), 'pResource'), (ObjPointer(ID3D12Resource), 'pCounterResource'), (Pointer(Const(D3D12_UNORDERED_ACCESS_VIEW_DESC)), 'pDesc'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'DestDescriptor')]),
    StdMethod(Void, 'CreateRenderTargetView', [(ObjPointer(ID3D12Resource), 'pResource'), (Pointer(Const(D3D12_RENDER_TARGET_VIEW_DESC)), 'pDesc'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'DestDescriptor')]),
    StdMethod(Void, 'CreateDepthStencilView', [(ObjPointer(ID3D12Resource), 'pResource'), (Pointer(Const(D3D12_DEPTH_STENCIL_VIEW_DESC)), 'pDesc'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'DestDescriptor')]),
    StdMethod(Void, 'CreateSampler', [(Pointer(Const(D3D12_SAMPLER_DESC)), 'pDesc'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'DestDescriptor')]),
    StdMethod(Void, 'CopyDescriptors', [(UINT, 'NumDestDescriptorRanges'), (Array(Const(D3D12_CPU_DESCRIPTOR_HANDLE), 'NumDestDescriptorRanges'), 'pDestDescriptorRangeStarts'), (Array(Const(UINT), 'NumDestDescriptorRanges'), 'pDestDescriptorRangeSizes'), (UINT, 'NumSrcDescriptorRanges'), (Array(Const(D3D12_CPU_DESCRIPTOR_HANDLE), 'NumSrcDescriptorRanges'), 'pSrcDescriptorRangeStarts'), (Array(Const(UINT), 'NumSrcDescriptorRanges'), 'pSrcDescriptorRangeSizes'), (D3D12_DESCRIPTOR_HEAP_TYPE, 'DescriptorHeapsType')]),
    StdMethod(Void, 'CopyDescriptorsSimple', [(UINT, 'NumDescriptors'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'DestDescriptorRangeStart'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'SrcDescriptorRangeStart'), (D3D12_DESCRIPTOR_HEAP_TYPE, 'DescriptorHeapsType')]),
    StdMethod(D3D12_RESOURCE_ALLOCATION_INFO, 'GetResourceAllocationInfo', [(UINT, 'visibleMask'), (UINT, 'numResourceDescs'), (Array(Const(D3D12_RESOURCE_DESC), 'numResourceDescs'), 'pResourceDescs')]),
    StdMethod(D3D12_HEAP_PROPERTIES, 'GetCustomHeapProperties', [(UINT, 'nodeMask'), (D3D12_HEAP_TYPE, 'heapType')]),
    StdMethod(HRESULT, 'CreateCommittedResource', [(Pointer(Const(D3D12_HEAP_PROPERTIES)), 'pHeapProperties'), (D3D12_HEAP_FLAGS, 'HeapFlags'), (Pointer(Const(D3D12_RESOURCE_DESC)), 'pResourceDesc'), (D3D12_RESOURCE_STATES, 'InitialResourceState'), (Pointer(Const(D3D12_CLEAR_VALUE)), 'pOptimizedClearValue'), (REFIID, 'riidResource'), Out(Pointer(ObjPointer(Void)), 'ppvResource')]),
    StdMethod(HRESULT, 'CreateHeap', [(Pointer(Const(D3D12_HEAP_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvHeap')]),
    StdMethod(HRESULT, 'CreatePlacedResource', [(ObjPointer(ID3D12Heap), 'pHeap'), (UINT64, 'HeapOffset'), (Pointer(Const(D3D12_RESOURCE_DESC)), 'pDesc'), (D3D12_RESOURCE_STATES, 'InitialState'), (Pointer(Const(D3D12_CLEAR_VALUE)), 'pOptimizedClearValue'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvResource')], vars=[
        (D3D12_GPU_VIRTUAL_ADDRESS, 'GPUFrom'),
        (D3D12_RESOURCE_ALLOCATION_INFO, 'FromAllocationInfo')
    ]),
    StdMethod(HRESULT, 'CreateReservedResource', [(Pointer(Const(D3D12_RESOURCE_DESC)), 'pDesc'), (D3D12_RESOURCE_STATES, 'InitialState'), (Pointer(Const(D3D12_CLEAR_VALUE)), 'pOptimizedClearValue'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvResource')]),
    StdMethod(HRESULT, 'CreateSharedHandle', [(ObjPointer(ID3D12DeviceChild), 'pObject'), (Pointer(Const(SECURITY_ATTRIBUTES)), 'pAttributes'), (DWORD, 'Access'), (LPCWSTR, 'Name'), Out(Pointer(HANDLE), 'pHandle')]),
    StdMethod(HRESULT, 'OpenSharedHandle', [(HANDLE, 'NTHandle'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvObj')]),
    StdMethod(HRESULT, 'OpenSharedHandleByName', [(LPCWSTR, 'Name'), (DWORD, 'Access'), Out(Pointer(HANDLE), 'pNTHandle')]),
    StdMethod(HRESULT, 'MakeResident', [(UINT, 'NumObjects'), (Array(Const(ObjPointer(ID3D12Pageable)), 'NumObjects'), 'ppObjects')]),
    StdMethod(HRESULT, 'Evict', [(UINT, 'NumObjects'), (Array(Const(ObjPointer(ID3D12Pageable)), 'NumObjects'), 'ppObjects')]),
    StdMethod(HRESULT, 'CreateFence', [(UINT64, 'InitialValue'), (D3D12_FENCE_FLAGS, 'Flags'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppFence')]),
    StdMethod(HRESULT, 'GetDeviceRemovedReason', [], sideeffects=False),
    StdMethod(Void, 'GetCopyableFootprints', [(Pointer(Const(D3D12_RESOURCE_DESC)), 'pResourceDesc'), (UINT, 'FirstSubresource'), (UINT, 'NumSubresources'), (UINT64, 'BaseOffset'), Out(Array(D3D12_PLACED_SUBRESOURCE_FOOTPRINT, 'NumSubresources'), 'pLayouts'), Out(Array(UINT, 'NumSubresources'), 'pNumRows'), Out(Array(UINT64, 'NumSubresources'), 'pRowSizeInBytes'), Out(Pointer(UINT64), 'pTotalBytes')], sideeffects=False),
    StdMethod(HRESULT, 'CreateQueryHeap', [(Pointer(Const(D3D12_QUERY_HEAP_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvHeap')]),
    StdMethod(HRESULT, 'SetStablePowerState', [(BOOL, 'Enable')]),
    StdMethod(HRESULT, 'CreateCommandSignature', [(Pointer(Const(D3D12_COMMAND_SIGNATURE_DESC)), 'pDesc'), (ObjPointer(ID3D12RootSignature), 'pRootSignature'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvCommandSignature')]),
    StdMethod(Void, 'GetResourceTiling', [(ObjPointer(ID3D12Resource), 'pTiledResource'), Out(Pointer(UINT), 'pNumTilesForEntireResource'), Out(Pointer(D3D12_PACKED_MIP_INFO), 'pPackedMipDesc'), Out(Pointer(D3D12_TILE_SHAPE), 'pStandardTileShapeForNonPackedMips'), Out(Pointer(UINT), 'pNumSubresourceTilings'), (UINT, 'FirstSubresourceTilingToGet'), Out(Pointer(D3D12_SUBRESOURCE_TILING), 'pSubresourceTilingsForNonPackedMips')]),
    StdMethod(LUID, 'GetAdapterLuid', [], sideeffects=False),
]

ID3D12PipelineLibrary.methods += [
    StdMethod(HRESULT, 'StorePipeline', [(LPCWSTR, 'pName'), (ObjPointer(ID3D12PipelineState), 'pPipeline')]),
    StdMethod(HRESULT, 'LoadGraphicsPipeline', [(LPCWSTR, 'pName'), (Pointer(Const(D3D12_GRAPHICS_PIPELINE_STATE_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppPipelineState')]),
    StdMethod(HRESULT, 'LoadComputePipeline', [(LPCWSTR, 'pName'), (Pointer(Const(D3D12_COMPUTE_PIPELINE_STATE_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppPipelineState')]),
    StdMethod(SIZE_T, 'GetSerializedSize', [], sideeffects=False),
    StdMethod(HRESULT, 'Serialize', [Out(Blob(Void, 'DataSizeInBytes'), 'pData'), (SIZE_T, 'DataSizeInBytes')], sideeffects=False),
]

ID3D12PipelineLibrary1.methods += [
    StdMethod(HRESULT, 'LoadPipeline', [(LPCWSTR, 'pName'), (Pointer(Const(D3D12_PIPELINE_STATE_STREAM_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppPipelineState')]),
]

ID3D12Device1.methods += [
    StdMethod(HRESULT, 'CreatePipelineLibrary', [(OpaquePointer(Const(Void)), 'pLibraryBlob'), (SIZE_T, 'BlobLength'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppPipelineLibrary')]),
    StdMethod(HRESULT, 'SetEventOnMultipleFenceCompletion', [(Array(Const(ObjPointer(ID3D12Fence)), 'NumFences'), 'ppFences'), (Array(Const(UINT64), 'NumFences'), 'pFenceValues'), (UINT, 'NumFences'), (D3D12_MULTIPLE_FENCE_WAIT_FLAGS, 'Flags'), (HANDLE, 'hEvent')]),
    StdMethod(HRESULT, 'SetResidencyPriority', [(UINT, 'NumObjects'), (Array(Const(ObjPointer(ID3D12Pageable)), 'NumObjects'), 'ppObjects'), (Array(Const(D3D12_RESIDENCY_PRIORITY), 'NumObjects'), 'pPriorities')]),
]

ID3D12Device2.methods += [
    StdMethod(HRESULT, 'CreatePipelineState', [(Pointer(Const(D3D12_PIPELINE_STATE_STREAM_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppPipelineState')]),
]

ID3D12Device3.methods += [
    StdMethod(HRESULT, 'OpenExistingHeapFromAddress', [(OpaquePointer(Const(Void)), 'pAddress'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvHeap')], vars=[
        (SIZE_T, 'AllocationSize')
    ]),
    StdMethod(HRESULT, 'OpenExistingHeapFromFileMapping', [(HANDLE, 'hFileMapping'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvHeap')]),
    StdMethod(HRESULT, 'EnqueueMakeResident', [(D3D12_RESIDENCY_FLAGS, 'Flags'), (UINT, 'NumObjects'), (Array(Const(ObjPointer(ID3D12Pageable)), 'NumObjects'), 'ppObjects'), (ObjPointer(ID3D12Fence), 'pFenceToSignal'), (UINT64, 'FenceValueToSignal')]),
]

ID3D12ProtectedSession.methods += [
    StdMethod(HRESULT, 'GetStatusFence', [(REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppFence')]),
    StdMethod(D3D12_PROTECTED_SESSION_STATUS, 'GetSessionStatus', []),
]

ID3D12ProtectedResourceSession.methods += [
    StdMethod(D3D12_PROTECTED_RESOURCE_SESSION_DESC, 'GetDesc', [], sideeffects=False),
]

ID3D12Device4.methods += [
    StdMethod(HRESULT, 'CreateCommandList1', [(UINT, 'nodeMask'), (D3D12_COMMAND_LIST_TYPE, 'type'), (D3D12_COMMAND_LIST_FLAGS, 'flags'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppCommandList')]),
    StdMethod(HRESULT, 'CreateProtectedResourceSession', [(Pointer(Const(D3D12_PROTECTED_RESOURCE_SESSION_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppSession')]),
    StdMethod(HRESULT, 'CreateCommittedResource1', [(Pointer(Const(D3D12_HEAP_PROPERTIES)), 'pHeapProperties'), (D3D12_HEAP_FLAGS, 'HeapFlags'), (Pointer(Const(D3D12_RESOURCE_DESC)), 'pResourceDesc'), (D3D12_RESOURCE_STATES, 'InitialResourceState'), (Pointer(Const(D3D12_CLEAR_VALUE)), 'pOptimizedClearValue'), (ObjPointer(ID3D12ProtectedResourceSession), 'pProtectedSession'), (REFIID, 'riidResource'), Out(Pointer(ObjPointer(Void)), 'ppvResource')]),
    StdMethod(HRESULT, 'CreateHeap1', [(Pointer(Const(D3D12_HEAP_DESC)), 'pDesc'), (ObjPointer(ID3D12ProtectedResourceSession), 'pProtectedSession'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvHeap')]),
    StdMethod(HRESULT, 'CreateReservedResource1', [(Pointer(Const(D3D12_RESOURCE_DESC)), 'pDesc'), (D3D12_RESOURCE_STATES, 'InitialState'), (Pointer(Const(D3D12_CLEAR_VALUE)), 'pOptimizedClearValue'), (ObjPointer(ID3D12ProtectedResourceSession), 'pProtectedSession'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvResource')]),
    StdMethod(D3D12_RESOURCE_ALLOCATION_INFO, 'GetResourceAllocationInfo1', [(UINT, 'visibleMask'), (UINT, 'numResourceDescs'), (Array(Const(D3D12_RESOURCE_DESC), 'numResourceDescs'), 'pResourceDescs'), Out(Pointer(D3D12_RESOURCE_ALLOCATION_INFO1), 'pResourceAllocationInfo1')]),
]

ID3D12LifetimeOwner.methods += [
    StdMethod(Void, 'LifetimeStateUpdated', [(D3D12_LIFETIME_STATE, 'NewState')]),
]

ID3D12SwapChainAssistant.methods += [
    StdMethod(LUID, 'GetLUID', []),
    StdMethod(HRESULT, 'GetSwapChainObject', [(REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppv')]),
    StdMethod(HRESULT, 'GetCurrentResourceAndCommandQueue', [(REFIID, 'riidResource'), Out(Pointer(ObjPointer(Void)), 'ppvResource'), (REFIID, 'riidQueue'), Out(Pointer(ObjPointer(Void)), 'ppvQueue')]),
    StdMethod(HRESULT, 'InsertImplicitSync', []),
]

ID3D12LifetimeTracker.methods += [
    StdMethod(HRESULT, 'DestroyOwnedObject', [(ObjPointer(ID3D12DeviceChild), 'pObject')]),
]

ID3D12StateObject.methods += [
]

ID3D12StateObjectProperties.methods += [
    StdMethod(OpaquePointer(Void), 'GetShaderIdentifier', [(LPCWSTR, 'pExportName')], sideeffects=False),
    StdMethod(UINT64, 'GetShaderStackSize', [(LPCWSTR, 'pExportName')], sideeffects=False),
    StdMethod(UINT64, 'GetPipelineStackSize', [], sideeffects=False),
    StdMethod(Void, 'SetPipelineStackSize', [(UINT64, 'PipelineStackSizeInBytes')]),
]

ID3D12Device5.methods += [
    StdMethod(HRESULT, 'CreateLifetimeTracker', [(ObjPointer(ID3D12LifetimeOwner), 'pOwner'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvTracker')]),
    StdMethod(Void, 'RemoveDevice', []),
    StdMethod(HRESULT, 'EnumerateMetaCommands', [Out(Pointer(UINT), 'pNumMetaCommands'), Out(Array(D3D12_META_COMMAND_DESC, '*pNumMetaCommands'), 'pDesc')], sideeffects=False),
    StdMethod(HRESULT, 'EnumerateMetaCommandParameters', [(REFGUID, 'CommandId'), (D3D12_META_COMMAND_PARAMETER_STAGE, 'Stage'), Out(Pointer(UINT), 'pTotalStructureSizeInBytes'), Out(Pointer(UINT), 'pParameterCount'), Out(Array(D3D12_META_COMMAND_PARAMETER_DESC, '*pParameterCount'), 'pParameterDescs')], sideeffects=False),
    StdMethod(HRESULT, 'CreateMetaCommand', [(REFGUID, 'CommandId'), (UINT, 'NodeMask'), (Blob(Const(Void), 'CreationParametersDataSizeInBytes'), 'pCreationParametersData'), (SIZE_T, 'CreationParametersDataSizeInBytes'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppMetaCommand')]),
    StdMethod(HRESULT, 'CreateStateObject', [(Pointer(Const(D3D12_STATE_OBJECT_DESC)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppStateObject')]),
    StdMethod(Void, 'GetRaytracingAccelerationStructurePrebuildInfo', [(Pointer(Const(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS)), 'pDesc'), Out(Pointer(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO), 'pInfo')], sideeffects=False),
    StdMethod(D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS, 'CheckDriverMatchingIdentifier', [(D3D12_SERIALIZED_DATA_TYPE, 'SerializedDataType'), (Pointer(Const(D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER)), 'pIdentifierToCheck')]),
]

ID3D12DeviceRemovedExtendedDataSettings.methods += [
    StdMethod(Void, 'SetAutoBreadcrumbsEnablement', [(D3D12_DRED_ENABLEMENT, 'Enablement')]),
    StdMethod(Void, 'SetPageFaultEnablement', [(D3D12_DRED_ENABLEMENT, 'Enablement')]),
    StdMethod(Void, 'SetWatsonDumpEnablement', [(D3D12_DRED_ENABLEMENT, 'Enablement')]),
]

ID3D12DeviceRemovedExtendedDataSettings1.methods += [
    StdMethod(Void, 'SetBreadcrumbContextEnablement', [(D3D12_DRED_ENABLEMENT, 'Enablement')]),
]

ID3D12DeviceRemovedExtendedData.methods += [
    StdMethod(HRESULT, 'GetAutoBreadcrumbsOutput', [Out(Pointer(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT), 'pOutput')]),
    StdMethod(HRESULT, 'GetPageFaultAllocationOutput', [Out(Pointer(D3D12_DRED_PAGE_FAULT_OUTPUT), 'pOutput')]),
]

ID3D12DeviceRemovedExtendedData1.methods += [
    StdMethod(HRESULT, 'GetAutoBreadcrumbsOutput1', [Out(Pointer(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1), 'pOutput')]),
    StdMethod(HRESULT, 'GetPageFaultAllocationOutput1', [Out(Pointer(D3D12_DRED_PAGE_FAULT_OUTPUT1), 'pOutput')]),
]

ID3D12Device6.methods += [
    StdMethod(HRESULT, 'SetBackgroundProcessingMode', [(D3D12_BACKGROUND_PROCESSING_MODE, 'Mode'), (D3D12_MEASUREMENTS_ACTION, 'MeasurementsAction'), (HANDLE, 'hEventToSignalUponCompletion'), Out(Pointer(BOOL), 'pbFurtherMeasurementsDesired')]),
]

ID3D12ProtectedResourceSession1.methods += [
    StdMethod(D3D12_PROTECTED_RESOURCE_SESSION_DESC1, 'GetDesc1', [], sideeffects=False),
]

ID3D12Device7.methods += [
    StdMethod(HRESULT, 'AddToStateObject', [(Pointer(Const(D3D12_STATE_OBJECT_DESC)), 'pAddition'), (ObjPointer(ID3D12StateObject), 'pStateObjectToGrowFrom'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppNewStateObject')]),
    StdMethod(HRESULT, 'CreateProtectedResourceSession1', [(Pointer(Const(D3D12_PROTECTED_RESOURCE_SESSION_DESC1)), 'pDesc'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppSession')]),
]

ID3D12Device8.methods += [
    StdMethod(D3D12_RESOURCE_ALLOCATION_INFO, 'GetResourceAllocationInfo2', [(UINT, 'visibleMask'), (UINT, 'numResourceDescs'), (Pointer(Const(D3D12_RESOURCE_DESC1)), 'pResourceDescs'), Out(Pointer(D3D12_RESOURCE_ALLOCATION_INFO1), 'pResourceAllocationInfo1')]),
    StdMethod(HRESULT, 'CreateCommittedResource2', [(Pointer(Const(D3D12_HEAP_PROPERTIES)), 'pHeapProperties'), (D3D12_HEAP_FLAGS, 'HeapFlags'), (Pointer(Const(D3D12_RESOURCE_DESC1)), 'pDesc'), (D3D12_RESOURCE_STATES, 'InitialResourceState'), (Pointer(Const(D3D12_CLEAR_VALUE)), 'pOptimizedClearValue'), (ObjPointer(ID3D12ProtectedResourceSession), 'pProtectedSession'), (REFIID, 'riidResource'), Out(Pointer(ObjPointer(Void)), 'ppvResource')]),
    StdMethod(HRESULT, 'CreatePlacedResource1', [(ObjPointer(ID3D12Heap), 'pHeap'), (UINT64, 'HeapOffset'), (Pointer(Const(D3D12_RESOURCE_DESC1)), 'pDesc'), (D3D12_RESOURCE_STATES, 'InitialState'), (Pointer(Const(D3D12_CLEAR_VALUE)), 'pOptimizedClearValue'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvResource')]),
    StdMethod(Void, 'CreateSamplerFeedbackUnorderedAccessView', [(ObjPointer(ID3D12Resource), 'pTargetedResource'), (ObjPointer(ID3D12Resource), 'pFeedbackResource'), (D3D12_CPU_DESCRIPTOR_HANDLE, 'DestDescriptor')]),
    StdMethod(Void, 'GetCopyableFootprints1', [(Pointer(Const(D3D12_RESOURCE_DESC1)), 'pResourceDesc'), (UINT, 'FirstSubresource'), (UINT, 'NumSubresources'), (UINT64, 'BaseOffset'), Out(Pointer(D3D12_PLACED_SUBRESOURCE_FOOTPRINT), 'pLayouts'), Out(Pointer(UINT), 'pNumRows'), Out(Pointer(UINT64), 'pRowSizeInBytes'), Out(Pointer(UINT64), 'pTotalBytes')]),
]

ID3D12Resource1.methods += [
    StdMethod(HRESULT, 'GetProtectedResourceSession', [(REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppProtectedSession')]),
]

ID3D12Resource2.methods += [
    StdMethod(D3D12_RESOURCE_DESC1, 'GetDesc1', [], sideeffects=False),
]

ID3D12Heap1.methods += [
    StdMethod(HRESULT, 'GetProtectedResourceSession', [(REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppProtectedSession')]),
]

ID3D12GraphicsCommandList3.methods += [
    StdMethod(Void, 'SetProtectedResourceSession', [(ObjPointer(ID3D12ProtectedResourceSession), 'pProtectedResourceSession')]),
]

ID3D12MetaCommand.methods += [
    StdMethod(UINT64, 'GetRequiredParameterResourceSize', [(D3D12_META_COMMAND_PARAMETER_STAGE, 'Stage'), (UINT, 'ParameterIndex')]),
]

ID3D12GraphicsCommandList4.methods += [
    StdMethod(Void, 'BeginRenderPass', [(UINT, 'NumRenderTargets'), (Array(Const(D3D12_RENDER_PASS_RENDER_TARGET_DESC), 'NumRenderTargets'), 'pRenderTargets'), (Pointer(Const(D3D12_RENDER_PASS_DEPTH_STENCIL_DESC)), 'pDepthStencil'), (D3D12_RENDER_PASS_FLAGS, 'Flags')]),
    StdMethod(Void, 'EndRenderPass', []),
    StdMethod(Void, 'InitializeMetaCommand', [(ObjPointer(ID3D12MetaCommand), 'pMetaCommand'), (Blob(Const(Void), 'InitializationParametersDataSizeInBytes'), 'pInitializationParametersData'), (SIZE_T, 'InitializationParametersDataSizeInBytes')]),
    StdMethod(Void, 'ExecuteMetaCommand', [(ObjPointer(ID3D12MetaCommand), 'pMetaCommand'), (Blob(Const(Void), 'ExecutionParametersDataSizeInBytes'), 'pExecutionParametersData'), (SIZE_T, 'ExecutionParametersDataSizeInBytes')]),
    StdMethod(Void, 'BuildRaytracingAccelerationStructure', [(Pointer(Const(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC)), 'pDesc'), (UINT, 'NumPostbuildInfoDescs'), (Array(Const(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC), 'NumPostbuildInfoDescs'), 'pPostbuildInfoDescs')]),
    StdMethod(Void, 'EmitRaytracingAccelerationStructurePostbuildInfo', [(Pointer(Const(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC)), 'pDesc'), (UINT, 'NumSourceAccelerationStructures'), (Array(Const(D3D12_GPU_VIRTUAL_ADDRESS), 'NumSourceAccelerationStructures'), 'pSourceAccelerationStructureData')]),
    StdMethod(Void, 'CopyRaytracingAccelerationStructure', [(D3D12_GPU_VIRTUAL_ADDRESS, 'DestAccelerationStructureData'), (D3D12_GPU_VIRTUAL_ADDRESS, 'SourceAccelerationStructureData'), (D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE, 'Mode')]),
    StdMethod(Void, 'SetPipelineState1', [(ObjPointer(ID3D12StateObject), 'pStateObject')]),
    StdMethod(Void, 'DispatchRays', [(Pointer(Const(D3D12_DISPATCH_RAYS_DESC)), 'pDesc')]),
]

ID3D12Tools.methods += [
    StdMethod(Void, 'EnableShaderInstrumentation', [(BOOL, 'bEnable')]),
    StdMethod(BOOL, 'ShaderInstrumentationEnabled', []),
]

ID3D12GraphicsCommandList5.methods += [
    StdMethod(Void, 'RSSetShadingRate', [(D3D12_SHADING_RATE, 'baseShadingRate'), (Array(Const(D3D12_SHADING_RATE_COMBINER), 'D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT'), 'combiners')]),
    StdMethod(Void, 'RSSetShadingRateImage', [(ObjPointer(ID3D12Resource), 'shadingRateImage')]),
]

ID3D12GraphicsCommandList6.methods += [
    StdMethod(Void, 'DispatchMesh', [(UINT, 'ThreadGroupCountX'), (UINT, 'ThreadGroupCountY'), (UINT, 'ThreadGroupCountZ')]),
]

d3d12 = Module('d3d12')
d3d12.addFunctions([
    StdFunction(HRESULT, 'D3D12SerializeRootSignature', [(Pointer(Const(D3D12_ROOT_SIGNATURE_DESC)), 'pRootSignature'), (D3D_ROOT_SIGNATURE_VERSION, 'Version'), Out(Pointer(ObjPointer(ID3DBlob)), 'ppBlob'), Out(Pointer(ObjPointer(ID3DBlob)), 'ppErrorBlob')]),
    StdFunction(HRESULT, 'D3D12CreateRootSignatureDeserializer', [(LPCVOID, 'pSrcData'), (SIZE_T, 'SrcDataSizeInBytes'), (REFIID, 'pRootSignatureDeserializerInterface'), Out(Pointer(ObjPointer(Void)), 'ppRootSignatureDeserializer')]),
    StdFunction(HRESULT, 'D3D12SerializeVersionedRootSignature', [(Pointer(Const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC)), 'pRootSignature'), Out(Pointer(ObjPointer(ID3DBlob)), 'ppBlob'), Out(Pointer(ObjPointer(ID3DBlob)), 'ppErrorBlob')]),
    StdFunction(HRESULT, 'D3D12CreateVersionedRootSignatureDeserializer', [(LPCVOID, 'pSrcData'), (SIZE_T, 'SrcDataSizeInBytes'), (REFIID, 'pRootSignatureDeserializerInterface'), Out(Pointer(ObjPointer(Void)), 'ppRootSignatureDeserializer')]),
    StdFunction(HRESULT, 'D3D12CreateDevice', [(ObjPointer(IUnknown), 'pAdapter'), (D3D_FEATURE_LEVEL, 'MinimumFeatureLevel'), (REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppDevice')]),
    StdFunction(HRESULT, 'D3D12GetDebugInterface', [(REFIID, 'riid'), Out(Pointer(ObjPointer(Void)), 'ppvDebug')]),
    StdFunction(HRESULT, 'D3D12EnableExperimentalFeatures', [
        (UINT, 'NumFeatures'), 
        (OpaquePointer(Const(IID)), 'pIIDs'), 
        Out(OpaquePointer(Void), 'pConfigurationStructs'), 
        Out(OpaquePointer(UINT), 'pConfigurationStructSizes')
    ]),
])

d3d12.addInterfaces([
    ID3D12Object,
    ID3D12DeviceChild,
    ID3D12Pageable,
    ID3D12Resource,
    ID3D12Fence,

    ID3D12Debug,
    ID3D12Debug1,
    ID3D12Debug2,
    ID3D12Debug3,
    ID3D12DebugDevice1,
    ID3D12DebugDevice,
    ID3D12DebugDevice2,
    ID3D12DebugCommandQueue,
    ID3D12DebugCommandList1,
    ID3D12DebugCommandList,
    ID3D12DebugCommandList2,
    ID3D12SharingContract,
    ID3D12InfoQueue,

    ID3D12RootSignature,
    ID3D12RootSignatureDeserializer,
    ID3D12VersionedRootSignatureDeserializer,
    ID3D12Heap,
    ID3D12CommandAllocator,
    ID3D12Fence1,
    ID3D12PipelineState,
    ID3D12DescriptorHeap,
    ID3D12QueryHeap,
    ID3D12CommandSignature,
    ID3D12CommandList,
    ID3D12GraphicsCommandList,
    ID3D12GraphicsCommandList1,
    ID3D12GraphicsCommandList2,
    ID3D12CommandQueue,
    ID3D12Device,
    ID3D12PipelineLibrary,
    ID3D12PipelineLibrary1,
    ID3D12Device1,
    ID3D12Device2,
    ID3D12Device3,
    ID3D12ProtectedSession,
    ID3D12ProtectedResourceSession,
    ID3D12Device4,
    ID3D12LifetimeOwner,
    ID3D12SwapChainAssistant,
    ID3D12LifetimeTracker,
    ID3D12StateObject,
    ID3D12StateObjectProperties,
    ID3D12Device5,
    ID3D12DeviceRemovedExtendedDataSettings,
    ID3D12DeviceRemovedExtendedDataSettings1,
    ID3D12DeviceRemovedExtendedData,
    ID3D12DeviceRemovedExtendedData1,
    ID3D12Device6,
    ID3D12ProtectedResourceSession1,
    ID3D12Device7,
    ID3D12Device8,
    ID3D12Resource1,
    ID3D12Resource2,
    ID3D12Heap1,
    ID3D12GraphicsCommandList3,
    ID3D12MetaCommand,
    ID3D12GraphicsCommandList4,
    ID3D12Tools,
    ID3D12GraphicsCommandList5,
    ID3D12GraphicsCommandList6,
])
